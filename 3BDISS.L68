00001414 Starting Address
Assembler used: EASy68K Editor/Assembler v5.13.01
Created On: 11/30/2013 5:23:36 AM

00000000                             1          INCLUDE 'test.x68'
00007000                             2      ORG    $7000
00007000  =000000FA                  3  VHEX1   EQU $FA
00007000  =0000DADA                  4  VHEX2   EQU $DADA
00007000  =ADADDADA                  5  VHEX3   EQU $ADADDADA
00007000  =00000045                  6  VHEX4   EQU $45
00007000  =00000000                  7  CBITS   EQU $00000000
00007000  D200                       8      ADD.B   D0,D1
00007002  203C ADADDADA              9      MOVE.L  #VHEX3, D0
00007008  1200                      10      MOVE.B  D0, D1
0000700A  3200                      11      MOVE.W  D0, D1
0000700C  2200                      12      MOVE.L  D0, D1
0000700E  7000                      13      MOVE.L  #CBITS, D0
00007010  7200                      14      MOVE.L  #CBITS, D1      
00007012                            15  
00007012  21FC ADADDADA 7000        16      MOVE.L  #VHEX3, $7000
0000701A  247C 00007000             17      MOVEA.L #$7000, A2
00007020  300A                      18      MOVE.W  A2, D0
00007022  200A                      19      MOVE.L  A2, D0
00007024  7000                      20      MOVE.L  #CBITS, D0
00007026                            21      
00007026                            22  
00007026  1012                      23      MOVE.B  (A2), D0
00007028  3012                      24      MOVE.W  (A2), D0
0000702A  2012                      25      MOVE.L  (A2), D0
0000702C  7000                      26      MOVE.L  #CBITS, D0
0000702E  247C 00000000             27      MOVEA.L #CBITS, A2
00007034                            28  
00007034                            29  
00007034  101A                      30      MOVE.B  (A2)+, D0
00007036  247C 00000000             31      MOVEA.L #CBITS, A2
0000703C  247C 00007000             32      MOVEA.L #$7000, A2
00007042  301A                      33      MOVE.W  (A2)+, D0
00007044  247C 00000000             34      MOVEA.L #CBITS, A2
0000704A  247C 00007000             35      MOVEA.L #$7000, A2
00007050  201A                      36      MOVE.L  (A2)+, D0
00007052  7000                      37      MOVE.L  #CBITS, D0
00007054  247C 00000000             38      MOVEA.L #CBITS, A2    
0000705A                            39      
0000705A                            40  
0000705A  247C 00007004             41      MOVEA.L #$7004, A2
00007060  1022                      42      MOVE.B  -(A2), D0
00007062  247C 00000000             43      MOVEA.L #CBITS, A2
00007068  247C 00007004             44      MOVEA.L #$7004, A2
0000706E  3022                      45      MOVE.W  -(A2), D0
00007070  247C 00000000             46      MOVEA.L #CBITS, A2
00007076  247C 00007004             47      MOVEA.L #$7004, A2
0000707C  2022                      48      MOVE.L  -(A2), D0
0000707E  7000                      49      MOVE.L  #CBITS, D0
00007080  247C 00000000             50      MOVEA.L #CBITS, A2  
00007086                            51      
00007086                            52  
00007086  1038 7000                 53      MOVE.B  $7000, D0
0000708A  3038 7000                 54      MOVE.W  $7000, D0
0000708E  2038 7000                 55      MOVE.L  $7000, D0 
00007092  7000                      56      MOVE.L  #CBITS, D0  
00007094                            57  
00007094                            58  
00007094                            59  
00007094  103C 00FA                 60      MOVE.B  #VHEX1, D0
00007098  303C DADA                 61      MOVE.W  #VHEX2, D0
0000709C  203C ADADDADA             62      MOVE.L  #VHEX3, D0
000070A2  7000                      63      MOVE.L  #CBITS, D0   
000070A4                            64      
000070A4  2038 7000                 65      MOVE.L  $7000, D0 
000070A8  267C 00007004             66      MOVEA.L #$7004, A3
000070AE  1680                      67      MOVE.B  D0, (A3)
000070B0  3680                      68      MOVE.W  D0, (A3)
000070B2  2680                      69      MOVE.L  D0, (A3)
000070B4  7000                      70      MOVE.L  #CBITS, D0  
000070B6  26BC 00000000             71      MOVE.L  #CBITS, (A3)
000070BC                            72  
000070BC  2478 7000                 73      MOVEA.L $7000, A2 
000070C0  368A                      74      MOVE.W  A2, (A3)
000070C2  268A                      75      MOVE.L  A2, (A3)  
000070C4  26BC 00000000             76      MOVE.L  #CBITS, (A3)
000070CA                            77  
000070CA  247C 00000000             78      MOVEA.L #CBITS,A2
000070D0  247C 00007000             79      MOVEA.L #$7000, A2
000070D6  3692                      80      MOVE.W  (A2), (A3)
000070D8  2692                      81      MOVE.L  (A2), (A3)  
000070DA  26BC 00000000             82      MOVE.L  #CBITS, (A3)
000070E0                            83  
000070E0  247C 00000000             84      MOVEA.L #CBITS,A2
000070E6  247C 00007000             85      MOVEA.L #$7000, A2
000070EC  169A                      86      MOVE.B  (A2)+, (A3)
000070EE  247C 00000000             87      MOVEA.L #CBITS,A2
000070F4  247C 00007000             88      MOVEA.L #$7000, A2
000070FA  369A                      89      MOVE.W  (A2)+, (A3)
000070FC  247C 00000000             90      MOVEA.L #CBITS,A2
00007102  247C 00007000             91      MOVEA.L #$7000, A2
00007108  269A                      92      MOVE.L  (A2)+, (A3)
0000710A  247C 00000000             93      MOVEA.L #CBITS,A2
00007110  247C 00007003             94      MOVEA.L #$7003, A2  
00007116  26BC 00000000             95      MOVE.L  #CBITS, (A3)
0000711C  16A2                      96      MOVE.B  -(A2), (A3)
0000711E  36A2                      97      MOVE.W  -(A2), (A3)
00007120  247C 00000000             98      MOVEA.L #CBITS,A2
00007126  247C 00000000             99      MOVEA.L #CBITS, A2
0000712C  26BC 00000000            100      MOVE.L  #CBITS, (A3)    
00007132                           101  
00007132  16B8 7000                102      MOVE.B  $7000, (A3)
00007136  36B8 7000                103      MOVE.W  $7000, (A3)
0000713A  26B8 7000                104      MOVE.L  $7000, (A3)
0000713E  26BC 00000000            105      MOVE.L  #CBITS, (A3)  
00007144                           106  
00007144  267C 00007000            107      MOVEA.L #$7000, A3
0000714A                           108  
0000714A  16BC 00FA                109      MOVE.B  #VHEX1, (A3)
0000714E  36BC DADA                110      MOVE.W  #VHEX2, (A3)
00007152  26BC ADADDADA            111      MOVE.L  #VHEX3, (A3)
00007158  26BC 00000000            112      MOVE.L  #CBITS, (A3)
0000715E                           113  
0000715E                           114  
0000715E  203C ADADDADA            115      MOVE.L  #VHEX3, D0
00007164  247C 00007004            116      MOVEA.L #$7004, A2
0000716A  14C0                     117      MOVE.B  D0,(A2)+
0000716C  247C 00000000            118      MOVEA.L #CBITS, A2
00007172  247C 00007004            119      MOVEA.L #$7004, A2
00007178  34C0                     120      MOVE.W  D0,(A2)+
0000717A  247C 00000000            121      MOVEA.L #CBITS, A2
00007180  247C 00007004            122      MOVEA.L #$7004, A2
00007186  24C0                     123      MOVE.L  D0,(A2)+
00007188  7000                     124      MOVE.L  #CBITS, D0
0000718A  247C 00000000            125      MOVEA.L #CBITS, A2    
00007190                           126  
00007190                           127  
00007190  21FC 00000000 7000       128      MOVE.L  #CBITS, $7000
00007198  267C 00007000            129      MOVEA.L  #$7000, A3
0000719E  247C 00007004            130      MOVEA.L #$7004, A2
000071A4  14D3                     131      MOVE.B  (A3),(A2)+
000071A6  247C 00000000            132      MOVEA.L #CBITS, A2
000071AC  247C 00007004            133      MOVEA.L #$7004, A2
000071B2  34D3                     134      MOVE.W  (A3),(A2)+
000071B4  247C 00000000            135      MOVEA.L #CBITS, A2
000071BA  247C 00007004            136      MOVEA.L #$7004, A2
000071C0  24D3                     137      MOVE.L  (A3),(A2)+
000071C2  7000                     138      MOVE.L  #CBITS, D0
000071C4  247C 00000000            139      MOVEA.L #CBITS, A2 
000071CA                           140  
000071CA                           141  
000071CA                           142      
000071CA  267C 00007008            143      MOVEA.L #$7008, A3
000071D0  247C 00006000            144      MOVEA.L #$6000, A2
000071D6  34E3                     145      MOVE.W  -(A3),(A2)+
000071D8  247C 00000000            146      MOVEA.L #CBITS, A2
000071DE  267C 00000000            147      MOVEA.L #CBITS, A3
000071E4  267C 00007008            148      MOVEA.L #$7008, A3
000071EA  247C 00006000            149      MOVEA.L #$6000, A2
000071F0  24E3                     150      MOVE.L  -(A3),(A2)+
000071F2  267C 00000000            151      MOVEA.L #CBITS, A3
000071F8  247C 00000000            152      MOVEA.L #CBITS, A2
000071FE                           153  
000071FE                           154  
000071FE                           155      
000071FE  247C 00007000            156      MOVEA.L #$7000, A2
00007204  21FC ADADDADA 7000       157      MOVE.L  #VHEX3, $7000
0000720C  34F8 6000                158      MOVE.W  $6000,(A2)+
00007210  247C 00007000            159      MOVEA.L #$7000, A2
00007216  24F8 6000                160      MOVE.L  $6000,(A2)+
0000721A  247C 00000000            161      MOVEA.L #CBITS, A2
00007220                           162  
00007220                           163  
00007220                           164  
00007220                           165  
00007220  247C 00007004            166      MOVEA.L #$7004, A2
00007226  24FC ADADDADA            167      MOVE.L  #VHEX3,(A2)+
0000722C  7000                     168      MOVE.L  #CBITS, D0
0000722E  247C 00000000            169      MOVEA.L #CBITS, A2    
00007234                           170      
00007234                           171  
00007234  203C ADADDADA            172      MOVE.L  #VHEX3, D0
0000723A  247C 00007004            173      MOVEA.L #$7004, A2
00007240  1500                     174      MOVE.B  D0,-(A2)
00007242  247C 00000000            175      MOVEA.L #CBITS, A2
00007248  247C 00007004            176      MOVEA.L #$7004, A2
0000724E  3500                     177      MOVE.W  D0,-(A2)
00007250  247C 00000000            178      MOVEA.L #CBITS, A2
00007256  247C 00007004            179      MOVEA.L #$7004, A2
0000725C  2500                     180      MOVE.L  D0,-(A2)
0000725E  7000                     181      MOVE.L  #CBITS, D0
00007260  247C 00000000            182      MOVEA.L #CBITS, A2    
00007266                           183  
00007266                           184  
00007266  21FC 00000000 7000       185      MOVE.L  #CBITS, $7000
0000726E  267C 00007000            186      MOVEA.L  #$7000, A3
00007274  247C 00007004            187      MOVEA.L #$7004, A2
0000727A  1513                     188      MOVE.B  (A3),-(A2)
0000727C  247C 00000000            189      MOVEA.L #CBITS, A2
00007282  247C 00007004            190      MOVEA.L #$7004, A2
00007288  3513                     191      MOVE.W  (A3),-(A2)
0000728A  247C 00000000            192      MOVEA.L #CBITS, A2
00007290  247C 00007004            193      MOVEA.L #$7004, A2
00007296  2513                     194      MOVE.L  (A3),-(A2)
00007298  7000                     195      MOVE.L  #CBITS, D0
0000729A  247C 00000000            196      MOVEA.L #CBITS, A2 
000072A0                           197  
000072A0                           198  
000072A0                           199      
000072A0  267C 00007008            200      MOVEA.L #$7008, A3
000072A6  247C 00006008            201      MOVEA.L #$6008, A2
000072AC  3523                     202      MOVE.W  -(A3),-(A2)
000072AE  247C 00000000            203      MOVEA.L #CBITS, A2
000072B4  267C 00000000            204      MOVEA.L #CBITS, A3
000072BA  267C 00007008            205      MOVEA.L #$7008, A3
000072C0  247C 00006000            206      MOVEA.L #$6000, A2
000072C6  2523                     207      MOVE.L  -(A3),-(A2)
000072C8  267C 00000000            208      MOVEA.L #CBITS, A3
000072CE  247C 00000000            209      MOVEA.L #CBITS, A2
000072D4                           210  
000072D4                           211  
000072D4                           212      
000072D4  247C 00007004            213      MOVEA.L #$7004, A2
000072DA  21FC ADADDADA 7004       214      MOVE.L  #VHEX3, $7004
000072E2  3538 6000                215      MOVE.W  $6000,-(A2)
000072E6  247C 00007000            216      MOVEA.L #$7000, A2
000072EC  2538 6000                217      MOVE.L  $6000,-(A2)
000072F0  247C 00000000            218      MOVEA.L #CBITS, A2
000072F6                           219  
000072F6                           220  
000072F6                           221  
000072F6                           222  
000072F6  247C 00007004            223      MOVEA.L #$7004, A2
000072FC  253C ADADDADA            224      MOVE.L  #VHEX3,-(A2)
00007302  7000                     225      MOVE.L  #CBITS, D0
00007304  247C 00000000            226      MOVEA.L #CBITS, A2    
0000730A                           227  
0000730A                           228  
0000730A  203C ADADDADA            229      MOVE.L  #VHEX3, D0
00007310  11C0 7008                230      MOVE.B  D0, $7008
00007314  31C0 7008                231      MOVE.W  D0, $7008
00007318  21C0 7008                232      MOVE.L  D0, $7008
0000731C  21FC 00000000 7008       233      MOVE.L  #CBITS, $7008      
00007324                           234  
00007324  2440                     235      MOVE.L  D0, A2
00007326  31CA 7008                236      MOVE.W  A2, $7008  
0000732A  21CA 7008                237      MOVE.L  A2, $7008  
0000732E  21FC 00000000 7008       238      MOVE.L  #CBITS, $7008  
00007336                           239      
00007336                           240  
00007336  11D2 7008                241      MOVE.B  (A2),$7008  
0000733A  31D2 7008                242      MOVE.W  (A2),$7008  
0000733E  21D2 7008                243      MOVE.L  (A2),$7008    
00007342                           244  
00007342                           245  
00007342  247C 00007008            246      MOVEA.L #$7008, A2
00007348  31DA 6000                247      MOVE.W  (A2)+, $6000 
0000734C  247C 00000000            248      MOVEA.L #CBITS, A2
00007352  247C 00007008            249      MOVEA.L #$7008, A2
00007358  21DA 6000                250      MOVE.L  (A2)+, $6000
0000735C  247C 00000000            251      MOVE.L  #CBITS, A2
00007362  21FC 00000000 6000       252      MOVE.L  #CBITS, $6000 
0000736A                           253      
0000736A                           254  
0000736A  247C 00007008            255      MOVEA.L #$7008, A2
00007370  11E2 6000                256      MOVE.B  -(A2), $6000
00007374  247C 00000000            257      MOVEA.L #CBITS, A2
0000737A  247C 00007008            258      MOVEA.L #$7008, A2
00007380  31E2 6000                259      MOVE.W  -(A2), $6000
00007384  247C 00000000            260      MOVEA.L #CBITS, A2
0000738A  247C 00007008            261      MOVEA.L #$7008, A2
00007390  21E2 6000                262      MOVE.L  -(A2), $6000
00007394  21FC 00000000 6000       263      MOVE.L  #CBITS, $6000
0000739C  247C 00000000            264      MOVEA.L #CBITS, A2  
000073A2                           265      
000073A2                           266  
000073A2  11F8 7008 7000           267      MOVE.B  $7008, $7000
000073A8  31F8 7008 7000           268      MOVE.W  $7008, $7000
000073AE  21F8 7008 7000           269      MOVE.L  $7008, $7000
000073B4  21FC 00000000 7000       270      MOVE.L  #CBITS, $7000
000073BC                           271  
000073BC                           272  
000073BC                           273  
000073BC  11FC 00FA 7000           274      MOVE.B  #VHEX1, $7000
000073C2  31FC DADA 7000           275      MOVE.W  #VHEX2, $7000
000073C8  21FC ADADDADA 7000       276      MOVE.L  #VHEX3, $7000
000073D0  21FC 00000000 7000       277      MOVE.L  #CBITS, $7000   
000073D8                           278  
000073D8                           279  
000073D8                           280  
000073D8                           281  
000073D8                           282  
000073D8                           283  -------------------- end include --------------------
000073D8                           284  *----------------------------------------------------------------------------
000073D8                           285  * Title      : 3B Disassembler
000073D8                           286  * Written by : The Three Bears: Joseph Schooley, Nguyen Tong, Terence Calhoun
000073D8                           287  * Date       : 11/30/2013
000073D8                           288  * Description: A Motorola MC68000 Microprocessor Disassembler 
000073D8                           289  *----------------------------------------------------------------------------
00001000                           290          ORG     $1000
00001000  =0000000D                291  CR      EQU     $0D         ASCII: carriage return
00001000  =0000000A                292  LF      EQU     $0A         ASCII: line feed
00001000  =00000009                293  TB      EQU     $09         ASCII: horizontal tab
00001000  =00007000                294  MNADDR  EQU     $7000       Min address
00001000  =00FFFFFF                295  MXADDR  EQU     $00FFFFFF   Max address
00001000                           296  
00001000                           297  GBUFF   DS.L    1           Pointer to next location in "Good buffer"
00001004                           298  SLOC    DS.B    4           Starting location storage
00001008                           299  ELOC    DS.B    4           Ending location storage
0000100C                           300  
0000100C                           301  *-----I/O Memory-----
0000100C                           302  IOOPCD  DS.B    1           IO offset value for OPNAME, or FF if none
0000100D                           303  IOBDCD  DS.B    1           IO offset value for BAD OPNAME, or FF if none
0000100E                           304  IOSIZE  DS.B    1           IO size for OP code, or FF if none
00001010                           305  IOADDR  DS.L    1           IO address value for instruction memory location
00001014                           306  IOLC    DS.B    1           IO line counter for screen
00001015                           307  
00001015                           308  
00001015                           309  * OP code name memory
00001015                           310  * Example to display MULU:
00001015                           311  *       LEA     OPNAME,A1
00001015                           312  *       ADD.L   #$2D,A1
00001015                           313  *       MOVE.B  #14,D0
00001015                           314  *       TRAP    #15
00001015                           315  *                NAME           DEC     HEX
00001015= 4D 4F 56 45 00           316  OPNAME  DC.B    'MOVE',0        00      00
0000101A= 4D 4F 56 45 41 00        317          DC.B    'MOVEA',0       05      05
00001020= 4D 4F 56 45 4D 00        318          DC.B    'MOVEM',0       11      0B
00001026= 41 44 44 00              319          DC.B    'ADD',0         17      11
0000102A= 41 44 44 41 00           320          DC.B    'ADDA',0        21      15
0000102F= 41 44 44 51 00           321          DC.B    'ADDQ',0        26      1A
00001034= 53 55 42 00              322          DC.B    'SUB',0         31      1F
00001038= 53 55 42 41 00           323          DC.B    'SUBA',0        35      23
0000103D= 53 55 42 49 00           324          DC.B    'SUBI',0        40      28
00001042= 4D 55 4C 55 00           325          DC.B    'MULU',0        45      2D
00001047= 44 49 56 53 00           326          DC.B    'DIVS',0        50      32
0000104C= 4C 45 41 00              327          DC.B    'LEA',0         55      37
00001050= 41 4E 44 00              328          DC.B    'AND',0         59      3B
00001054= 4F 52 49 00              329          DC.B    'ORI',0         63      3F
00001058= 45 4F 52 00              330          DC.B    'EOR',0         67      43
0000105C= 45 4F 52 49 00           331          DC.B    'EORI',0        71      47
00001061= 4E 4F 54 00              332          DC.B    'NOT',0         76      4C
00001065= 41 53 4C 00              333          DC.B    'ASL',0         80      50
00001069= 4C 53 52 00              334          DC.B    'LSR',0         84      54
0000106D= 42 54 53 54 00           335          DC.B    'BTST',0        88      58
00001072= 43 4D 50 00              336          DC.B    'CMP',0         93      5D
00001076= 43 4D 50 41 00           337          DC.B    'CMPA',0        97      61
0000107B= 43 4D 50 49 00           338          DC.B    'CMPI',0        102     66
00001080= 42 43 43 00              339          DC.B    'BCC',0         107     6B
00001084= 42 45 51 00              340          DC.B    'BEQ',0         111     6F
00001088= 42 4C 54 00              341          DC.B    'BLT',0         115     73
0000108C= 42 4E 45 00              342          DC.B    'BNE',0         119     77
00001090= 42 48 49 00              343          DC.B    'BHI',0         123     7B
00001094= 4A 53 52 00              344          DC.B    'JSR',0         127     7F
00001098= 52 54 53 00              345          DC.B    'RTS',0         131     83
0000109C= 42 41 44 00              346          DC.B    'BAD',0         135     87
000010A0= 4D 4F 56 45 51 00        347          DC.B    'MOVEQ',0       139     8B
000010A6= 4C 53 4C 00              348          DC.B    'LSL',0         145     91
000010AA= 41 53 52 00              349          DC.B    'ASR',0         149     95
000010AE= 41 44 44 49 00           350          DC.B    'ADDI',0        153     99
000010B3                           351  
000010B3= 2E 42 00                 352  IOOPSZ  DC.B    '.B',0          0       00
000010B6= 2E 57 00                 353          DC.B    '.W',0          3       03
000010B9= 2E 4C 00                 354          DC.B    '.L',0          6,      06
000010BC= 20 20 00                 355          DC.B    '  ',0          9,      09
000010BF                           356  
000010BF                           357  *-----EA Memory------
000010BF                           358  DMD     DS.B    1               Destination mode
000010C0                           359  DRG     DS.B    1               Destination register
000010C1                           360  SMD     DS.B    1               Source mode
000010C2                           361  SRG     DS.B    1               Source register
000010C3                           362  
000010C3                           363  *--------------------
000010C3                           364  
000010C3= 20 20 5F 20 20 20 ...    365  MSSG0   DC.B    '  _     _     _     _     _     _ ',CR,LF
000010E7= 20 28 6F 5C 2D 2D ...    366          DC.B    ' (o\---/o)   (o\---/o)   (o\---/o)',CR,LF
0000110B= 20 20 7C 20 2D 20 ...    367          DC.B    '  | - - |     | ^ ^ |     | . . |',CR,LF
0000112E= 20 5F 28 20 28 59 ...    368          DC.B    ' _( (Y)_)_,--.(_(Y)_),--._(_(Y) )_',CR,LF
00001152= 2F 20 2F 5F 5F 5F ...    369          DC.B    '/ /___|_  ".."       ".."  _|___\ \',CR,LF
00001177= 5C 5F 5F 5F 5F 5F ...    370          DC.B    '\_______):     THREE     :(_______/',CR,LF
0000119C= 7C 20 7C 20 20 20 ...    371          DC.B    '| |   |        BEARS        |   | |',CR,LF
000011C1= 7C 20 7C 20 20 20 ...    372          DC.B    '| |   |    DISASSEMBLER     |   | |',CR,LF
000011E6= 7C 20 20 5C 5F 5F ...    373          DC.B    '|  \__|__Joey__Terence__Win_|__/  |',CR,LF
0000120B= 20 5C 20 20 20 20 ...    374          DC.B    ' \    I  /_  )   |   (  _\  I    /',CR,LF
0000122F= 20 20 5C 5F 5F 5F ...    375          DC.B    '  \____)___)(___/ \___)(___(____/',CR,LF
00001252= 57 65 6C 63 6F 6D ...    376          DC.B    'Welcome to 3B Disassembler. Enter 0 at any time to quit.',CR,LF,0
0000128D= 45 6E 74 65 72 20 ...    377  MSSG1   DC.B    'Enter the starting location of the code to be disassembled, or leave it blank',CR,LF,'for the starting address:',0
000012F6= 45 6E 74 65 72 20 ...    378  MSSG2   DC.B    'Enter the ending location of the code to be disassembled, or leave it blank',CR,LF,'for the ending address:',0
0000135B= 50 72 65 73 73 20 ...    379  MSSG4   DC.B    'Press any key for the next page.',0
0000137C= 59 6F 75 20 68 61 ...    380  MSSG5   DC.B    'You have reached the end of the program.',0
000013A5= 41 64 64 72 65 73 ...    381  HEADR   DC.B    'Address      OP-Code    Operand',CR,LF,0
000013C7= 54 68 65 20 69 6E ...    382  ERR0    DC.B    'The input address was too small.',CR,LF,0
000013EA= 54 68 65 20 69 6E ...    383  ERR1    DC.B    'The input address was too big.',CR,LF,0
0000140B= 74 65 73 74 2E 73 ...    384  FILE    DC.B    'test.s68',0
00001414                           385  
00001414  11FC 0000 1014           386  START   MOVE.B  #0,IOLC
0000141A  43F8 10C3                387          LEA     MSSG0,A1        Welcome message
0000141E  103C 000E                388          MOVE.B  #14,D0
00001422  4E4F                     389          TRAP    #15
00001424  6000 0216                390          BRA     PRMPT1
00001428                           391  *-----------------------------------
00001428                           392  *    Conversion & Comparison Methods
00001428                           393  *-----------------------------------
00001428                           394  
00001428                           395  *
00001428                           396  * Flag set / clear: Sets or clears the flag
00001428                           397  *
00001428                           398   
00001428  44FC 0004                399  FLAGST  MOVE.W  #%100,CCR       Set the z-flag
0000142C  4E75                     400          RTS                     Return to caller
0000142E  44FC 0000                401  FLAGCL  MOVE.W  #%000,CCR       Clear the z-flg
00001432  4E75                     402          RTS                     Return to caller
00001434                           403  
00001434                           404  *
00001434                           405  * ASCII2HEX: Convert ASCII into HEX.
00001434                           406  * Input ASCII from D0 output HEX to D1
00001434                           407  *
00001434                           408  
00001434                           409  ASCII2HEX
00001434  2200                     410          MOVE.L  D0,D1           Move the input to D1
00001436  0441 3030                411          SUB     #$3030,D1       Convert last word
0000143A  4841                     412          SWAP    D1              Swap bytes
0000143C  0441 3030                413          SUB     #$3030,D1       Convert first word
00001440  4841                     414          SWAP    D1              Restore order
00001442                           415          
00001442  2F02                     416          MOVE.L  D2,-(SP)        Push D2 on stack
00001444  4282                     417          CLR.L   D2              
00001446  143C 0003                418          MOVE.B  #3,D2           Set rotation count
0000144A                           419          
0000144A  6100 001A                420          BSR     A2H             Start loop
0000144E                           421          
0000144E  241F                     422          MOVE.L  (SP)+,D2        Restore D2
00001450                           423                  
00001450                           424                                * XAXBXCXD
00001450  E919                     425          ROL.B   #4,D1           XAXBXCDX
00001452  E949                     426          LSL.W   #4,D1           XAXBCDX0
00001454  E159                     427          ROL.W   #8,D1           XAXBX0CD
00001456  4841                     428          SWAP    D1              X0CDXAXB
00001458  E919                     429          ROL.B   #4,D1           X0CDXABX
0000145A  E949                     430          LSL.W   #4,D1           X0CDABX0
0000145C  E189                     431          LSL.L   #8,D1           CDABX000
0000145E  4241                     432          CLR.W   D1              CDAB0000
00001460  4841                     433          SWAP    D1              0000CDAB
00001462  E159                     434          ROL.W   #8,D1           0000ABCD
00001464  4E75                     435          RTS                     Return to caller
00001466                           436          
00001466                           437          
00001466                           438  A2H   * ASCII2HEX helper: Convert bytes that were > 30 to appropriate HEX value
00001466  B23C 0011                439          CMP.B   #$11,D1         11 = A
0000146A  6700 0032                440          BEQ     A2H11
0000146E  B23C 0012                441          CMP.B   #$12,D1         12 = B
00001472  6700 0030                442          BEQ     A2H12
00001476  B23C 0013                443          CMP.B   #$13,D1         13 = C
0000147A  6700 002E                444          BEQ     A2H13
0000147E  B23C 0014                445          CMP.B   #$14,D1         14 = D
00001482  6700 002C                446          BEQ     A2H14
00001486  B23C 0015                447          CMP.B   #$15,D1         15 = E
0000148A  6700 002A                448          BEQ     A2H15
0000148E  B23C 0016                449          CMP.B   #$16,D1         16 = F
00001492  6700 0028                450          BEQ     A2H16
00001496                           451          
00001496                           452  A2HADV  * A2H conversion branch helper: Rotate to the next byte, and loop back to A2H until all bytes have been analyzed/converted
00001496  E199                     453          ROL.L   #8,D1           Rotate 1st byte to the end
00001498  51CA FFCC                454          DBRA    D2,A2H          If count is > 0, decrement and loop back to A2H
0000149C  4E75                     455          RTS                     If count == 0, return to sub-routine
0000149E                           456  
0000149E                           457  * A2H conversion branches
0000149E  123C 000A                458  A2H11   MOVE.B  #$A,D1
000014A2  60F2                     459          BRA     A2HADV
000014A4  123C 000B                460  A2H12   MOVE.B  #$B,D1
000014A8  60EC                     461          BRA     A2HADV
000014AA  123C 000C                462  A2H13   MOVE.B  #$C,D1
000014AE  60E6                     463          BRA     A2HADV
000014B0  123C 000D                464  A2H14   MOVE.B  #$D,D1
000014B4  60E0                     465          BRA     A2HADV
000014B6  123C 000E                466  A2H15   MOVE.B  #$E,D1
000014BA  60DA                     467          BRA     A2HADV
000014BC  123C 000F                468  A2H16   MOVE.B  #$F,D1
000014C0  60D4                     469          BRA     A2HADV
000014C2                           470  
000014C2                           471  *
000014C2                           472  * HEX2ASCII: Convert ASCII into HEX.
000014C2                           473  * Input HEX from D0.W output ASCII to D1.L
000014C2                           474  *
000014C2                           475  
000014C2                           476  HEX2ASCII
000014C2  2200                     477          MOVE.L  D0,D1           Move the input to D1
000014C4                           478  
000014C4                           479                                * XXXXABCD
000014C4  4841                     480          SWAP    D1              ABCDXXXX
000014C6  4241                     481          CLR.W   D1              ABCD0000
000014C8  E999                     482          ROL.L   #4,D1           BCD0000A
000014CA  E909                     483          LSL.B   #4,D1           BCD000A0
000014CC  E159                     484          ROL.W   #8,D1           BCD0A000
000014CE  E999                     485          ROL.L   #4,D1           CD0A000B
000014D0  E159                     486          ROL.W   #8,D1           CD0A0B00
000014D2  E999                     487          ROL.L   #4,D1           D0A0B00C
000014D4  E909                     488          LSL.B   #4,D1           D0A0B0C0
000014D6  E999                     489          ROL.L   #4,D1           0A0B0C0D
000014D8                           490  
000014D8  2F02                     491          MOVE.L  D2,-(SP)        Push D2 on stack
000014DA  4282                     492          CLR.L   D2              
000014DC  143C 0003                493          MOVE.B  #3,D2           Set rotation count
000014E0  6100 0012                494          BSR     H2A             Start loop
000014E4  241F                     495          MOVE.L  (SP)+,D2        Restore D2
000014E6                           496  
000014E6  0641 3030                497          ADD     #$3030,D1       Convert last word
000014EA  4841                     498          SWAP    D1              Swap bytes
000014EC  0641 3030                499          ADD     #$3030,D1       Convert first word
000014F0  4841                     500          SWAP    D1              Restore order
000014F2  4E75                     501          RTS                     Return to caller
000014F4                           502          
000014F4                           503          
000014F4                           504  H2A   * ASCII2HEX helper: Convert bytes that were > 30 to appropriate HEX value
000014F4  B23C 000A                505          CMP.B   #$A,D1         A = 11
000014F8  6700 0032                506          BEQ     H2AA
000014FC  B23C 000B                507          CMP.B   #$B,D1         B = 12
00001500  6700 0030                508          BEQ     H2AB
00001504  B23C 000C                509          CMP.B   #$C,D1         C = 13
00001508  6700 002E                510          BEQ     H2AC
0000150C  B23C 000D                511          CMP.B   #$D,D1         D = 14
00001510  6700 002C                512          BEQ     H2AD
00001514  B23C 000E                513          CMP.B   #$E,D1         E = 15
00001518  6700 002A                514          BEQ     H2AE
0000151C  B23C 000F                515          CMP.B   #$F,D1         F = 16
00001520  6700 0028                516          BEQ     H2AF
00001524                           517          
00001524                           518  H2AADV  * H2A conversion branch helper: Rotate to the next byte, and loop back to H2A until all bytes have been analyzed/converted
00001524  E199                     519          ROL.L   #8,D1           Rotate 1st byte to the end
00001526  51CA FFCC                520          DBRA    D2,H2A          If count is > 0, decrement and loop back to A2H
0000152A  4E75                     521          RTS                     If count == 0, return to sub-routine
0000152C                           522  
0000152C                           523  * H2A conversion branches
0000152C  123C 0011                524  H2AA    MOVE.B  #$11,D1
00001530  60F2                     525          BRA     H2AADV
00001532  123C 0012                526  H2AB    MOVE.B  #$12,D1
00001536  60EC                     527          BRA     H2AADV
00001538  123C 0013                528  H2AC    MOVE.B  #$13,D1
0000153C  60E6                     529          BRA     H2AADV
0000153E  123C 0014                530  H2AD    MOVE.B  #$14,D1
00001542  60E0                     531          BRA     H2AADV
00001544  123C 0015                532  H2AE    MOVE.B  #$15,D1
00001548  60DA                     533          BRA     H2AADV
0000154A  123C 0016                534  H2AF    MOVE.B  #$16,D1
0000154E  60D4                     535          BRA     H2AADV
00001550                           536  
00001550                           537  
00001550                           538  *
00001550                           539  * Mask: Mask an input
00001550                           540  * Input value from D0, input mask from D2, output masked value to D1
00001550                           541  *
00001550                           542  
00001550  2200                     543  MASK    MOVE.L  D0,D1           Move the input to D1
00001552  C282                     544          AND.L   D2,D1           Perform AND on input with the mask
00001554  4E75                     545          RTS                     Return to caller
00001556                           546  
00001556                           547  *
00001556                           548  * Test Mask: Test an input to a mask.
00001556                           549  * Input value from D0, input mask from D2, and modify z-flag
00001556                           550  *
00001556                           551  
00001556  2F01                     552  TSTMSK  MOVE.L  D1,-(SP)        Push D1 on stack
00001558  61F6                     553          BSR     MASK            Mask the input
0000155A  B481                     554          CMP.L   D1,D2           Test if the input matched the mask
0000155C  6606                     555          BNE     *+8             If it didn't match, skip two lines
0000155E  221F                     556          MOVE.L  (SP)+,D1        Restore D1
00001560  6000 FEC6                557          BRA     FLAGST          Set flag & return to caller
00001564  221F                     558          MOVE.L  (SP)+,D1        Restore D1
00001566  6000 FEC6                559          BRA     FLAGCL          Clear flag & return to caller
0000156A                           560  
0000156A                           561  *
0000156A                           562  * Compare Mask: Strictly test an input to two masks allowing don't cares.
0000156A                           563  * Input value from D0, input 1 mask from D2, input 0 mask from D3, and modify z-flag
0000156A                           564  *
0000156A                           565  
0000156A                           566  CMPMSK  
0000156A  48E7 F800                567          MOVEM.L D0-D4,-(SP)     Push D1-D4 on stack
0000156E  2800                     568          MOVE.L  D0,D4           Copy input to D4
00001570  C082                     569          AND.L   D2,D0           AND 1 mask to input
00001572  B480                     570          CMP.L   D0,D2           Compare masked input to 1 mask
00001574  6708                     571          BEQ     *+10            If it matched, skip two lines
00001576  4CDF 001F                572          MOVEM.L (SP)+,D0-D4     If it didn't match, restore D1-D4
0000157A  6000 FEB2                573          BRA     FLAGCL          Clear flag & return to caller
0000157E  2004                     574          MOVE.L  D4,D0           Restore input
00001580  4680                     575          NOT.L   D0              !input
00001582  C083                     576          AND.L   D3,D0           AND 0 mask on input; effectively, NOR 0 mask to the input
00001584  B680                     577          CMP.L   D0,D3           Compare masked input to 0 mask
00001586  6608                     578          BNE     *+10            If it didn't match, skip to clear flag
00001588  4CDF 001F                579          MOVEM.L (SP)+,D0-D4     If it matched, restore D1-D4
0000158C  6000 FE9A                580          BRA     FLAGST          Set flag & return to caller
00001590  4CDF 001F                581          MOVEM.L (SP)+,D0-D4     Restore D1-D4
00001594  6000 FE98                582          BRA     FLAGCL          Clear flag & return to caller
00001598                           583          
00001598                           584  
00001598                           585  *
00001598                           586  * Extract Mask: Test an input to a subsequent mask, and return the masked value in LSB format
00001598                           587  * Input value from D0, input mask from D2, output value in D1
00001598                           588  *
00001598                           589  
00001598  2F02                     590  EXTMSK  MOVE.L  D2,-(SP)        Push D2 on stack
0000159A  2200                     591          MOVE.L  D0,D1           Move the input to D1
0000159C  C282                     592          AND.L   D2,D1           Perform AND on input with the mask
0000159E  0802 0000                593  EXTLP   BTST.L  #0,D2           Test the LSB of the mask for 0
000015A2  6700 0006                594          BEQ     EXTADV          If it is 0, rotate the mask until it is 1
000015A6  241F                     595          MOVE.L  (SP)+,D2        Restore the mask
000015A8  4E75                     596          RTS                     Return to caller
000015AA                           597          
000015AA  E28A                     598  EXTADV  LSR.L   #1,D2           Rotate mask right by 1 bit
000015AC  E299                     599          ROR.L   #1,D1           Rotate output in sync with mask
000015AE  60EE                     600          BRA     EXTLP           Return to loop
000015B0                           601  
000015B0                           602  *
000015B0                           603  * Display ASCII: Display the ASCII from D0.L to screen
000015B0                           604  *
000015B0  48E7 E000                605  DSPAX   MOVEM.L D0-D2,-(SP)     Push D0-D2
000015B4  2200                     606          MOVE.L  D0,D1
000015B6  6000 0044                607          BRA     DSPHST          Branch to DISPHX Start
000015BA                           608  
000015BA                           609  *
000015BA                           610  * Display HEX Address: Display the hex from A1 according to the byte length in D2.L
000015BA                           611  *
000015BA                           612  
000015BA  48E7 E040                613  DSPHXA  MOVEM.L D0-D2/A1,-(SP)  Push D0-D2, and A1 to stack
000015BE  51CA 0006                614  DSPHXLP DBRA    D2,*+8          Decrement count; if count is > 0, do not branch to return
000015C2  6000 0016                615          BRA     DSPHXRT         If count is <= 0, branch to return
000015C6  1019                     616          MOVE.B  (A1)+,D0        Get HEX byte in D0, post-increment A1
000015C8  6100 FEF8                617          BSR     HEX2ASCII       Get ASCII in D1
000015CC  E159                     618          ROL.W   #8,D1           Read first byte
000015CE  103C 0006                619          MOVE.B  #6,D0           Display char from D1.B
000015D2  4E4F                     620          TRAP    #15
000015D4  E159                     621          ROL.W   #8,D1           Read second byte
000015D6  4E4F                     622          TRAP    #15
000015D8  60E4                     623          BRA     DSPHXLP         Loop back
000015DA  4CDF 0207                624  DSPHXRT MOVEM.L (SP)+,D0-D2/A1  Else, restore values
000015DE  4E75                     625          RTS                     Return to caller
000015E0                           626          
000015E0                           627  
000015E0                           628  
000015E0                           629  *
000015E0                           630  * Display HEX Nibble: Display the hex from D0.B to screen
000015E0                           631  *
000015E0                           632  
000015E0  48E7 C000                633  DSPHXN  MOVEM.L D0/D1,-(SP)     Push D0 and D1 to stack
000015E4  6100 FEDC                634          BSR     HEX2ASCII       Get ASCII in D1
000015E8  103C 0006                635          MOVE.B  #6,D0           Set trap #6 to read single char from D1.B
000015EC  4E4F                     636          TRAP    #15
000015EE  4CDF 0003                637          MOVEM.L (SP)+,D0/D1     Restore D0 and D1
000015F2  4E75                     638          RTS                     Return to caller
000015F4                           639  
000015F4                           640  *
000015F4                           641  * Display HEX Word: Display the hex from D0.W to screen
000015F4                           642  *
000015F4                           643  
000015F4  48E7 E000                644  DSPHXW  MOVEM.L D0-D2,-(SP)     Push D0-D2 to stack
000015F8  6100 FEC8                645          BSR     HEX2ASCII       Get ASCII in D1
000015FC                           646  
000015FC  4282                     647  DSPHST  CLR.L   D2              
000015FE  143C 0003                648          MOVE.B  #3,D2           Set rotation count
00001602  103C 0006                649          MOVE.B  #6,D0           Set trap #6 to read single char from D1.B
00001606  6100 0008                650          BSR     DSPHADV         Start loop
0000160A                           651  
0000160A  4CDF 0007                652          MOVEM.L  (SP)+,D0-D2    Restore D0-D2
0000160E  4E75                     653          RTS                     Return to caller
00001610                           654  
00001610  E199                     655  DSPHADV ROL.L   #8,D1           Rotate bytes left
00001612  4E4F                     656          TRAP    #15             Display char in D1.B
00001614  51CA FFFA                657          DBRA    D2,DSPHADV      If count is > 0, decrement and loop back to DSPHADV
00001618  4E75                     658          RTS                     If count == 0, return to sub-routine
0000161A                           659  
0000161A                           660  *
0000161A                           661  * Display HEX Long: Display the hex from D0.L to screen
0000161A                           662  *
0000161A                           663  
0000161A  4840                     664  DSPHXL  SWAP    D0              Swap first half to D0.W
0000161C  61D6                     665          BSR     DSPHXW          Display first half
0000161E  4840                     666          SWAP    D0              Swap lower half to D0.W
00001620  61D2                     667          BSR     DSPHXW          Display lower half
00001622  4E75                     668          RTS                     Return to caller
00001624                           669          
00001624                           670  
00001624                           671          
00001624                           672  *--------------------
00001624                           673  *   I/O
00001624                           674  *--------------------                   
00001624  43F8 13C7                675  ILL0    LEA     ERR0,A1         Starting location was too small
00001628  103C 000E                676          MOVE.B  #14,D0
0000162C  4E4F                     677          TRAP    #15
0000162E  6000 000C                678          BRA     PRMPT1
00001632                           679          
00001632  43F8 13EA                680  ILL1    LEA     ERR1,A1         Starting location was too big
00001636  103C 000E                681          MOVE.B  #14,D0
0000163A  4E4F                     682          TRAP    #15
0000163C                           683          
0000163C  43F8 128D                684  PRMPT1  LEA     MSSG1,A1        Starting location request message
00001640  103C 000E                685          MOVE.B  #14,D0
00001644  4E4F                     686          TRAP    #15
00001646                           687          
00001646  43F8 1004                688          LEA     SLOC,A1         Input will be stored in SLOC
0000164A  103C 0002                689          MOVE.B  #2,D0           Input starting location (as string / hex)
0000164E  4E4F                     690          TRAP    #15
00001650                           691          
00001650  2038 1004                692          MOVE.L  (SLOC),D0       Move input to D0
00001654                           693  
00001654  B0BC 00FFFFFF            694          CMP.L   #$00FFFFFF,D0   Check if input was NULL
0000165A  660C                     695          BNE     *+14            If the input was not null, branch to convert input
0000165C  21FC 00007000 1004       696          MOVE.L  #MNADDR,(SLOC)  If the input was null, move the min address to SLOC
00001664  6000 003E                697          BRA     PRMPT2          Branch to the next prompt
00001668                           698          
00001668  6100 FDCA                699          BSR     ASCII2HEX       Convert D0 to HEX in D1
0000166C                           700          
0000166C  2281                     701          MOVE.L  D1,(A1)         Set SLOC to HEX value
0000166E                           702                          
0000166E  B2BC 00000000            703          CMP.L   #0,D1           Compare starting location to 0
00001674  6700 0452                704          BEQ     DONE            End program if 0
00001678                           705          
00001678  B2BC 00007000            706          CMP.L   #MNADDR,D1      Compare starting location to min
0000167E  65A4                     707          BLO     ILL0            Branch to ILL0 if < min
00001680                           708          
00001680  B2BC 00FFFFFF            709          CMP.L   #MXADDR,D1      Compare ending location to max
00001686  64AA                     710          BHS     ILL1            Branch to ILL1 if >= max
00001688                           711                  
00001688  6000 001A                712          BRA     PRMPT2          Branch to the next prompt
0000168C                           713  
0000168C  43F8 13C7                714  ILL2    LEA     ERR0,A1         Ending location was too small
00001690  103C 000E                715          MOVE.B  #14,D0
00001694  4E4F                     716          TRAP    #15
00001696  6000 000C                717          BRA     PRMPT2
0000169A                           718          
0000169A  43F8 13EA                719  ILL3    LEA     ERR1,A1         Ending location was too big
0000169E  103C 000E                720          MOVE.B  #14,D0
000016A2  4E4F                     721          TRAP    #15
000016A4                           722          
000016A4  43F8 12F6                723  PRMPT2  LEA     MSSG2,A1        Ending location request message
000016A8  103C 000E                724          MOVE.B  #14,D0
000016AC  4E4F                     725          TRAP    #15
000016AE                           726          
000016AE  43F8 1008                727          LEA     ELOC,A1         Input will be stored in SLOC
000016B2  103C 0002                728          MOVE.B  #2,D0           Input starting location (as string / hex)
000016B6  4E4F                     729          TRAP    #15
000016B8                           730          
000016B8  2038 1008                731          MOVE.L  (ELOC),D0       Move input to D0
000016BC                           732  
000016BC  B0BC 00FFFFFF            733          CMP.L   #$00FFFFFF,D0   Check if input was NULL
000016C2  660C                     734          BNE     *+14            If the input was not null, branch to convert input
000016C4  21FC 00FFFFFF 1008       735          MOVE.L  #MXADDR,(ELOC)  If the input was null, move the max address to ELOC
000016CC  6000 002A                736          BRA     PRMPTDN         Branch to prompt done
000016D0                           737          
000016D0  6100 FD62                738          BSR     ASCII2HEX       Convert D0 to HEX in D1
000016D4                           739          
000016D4  2281                     740          MOVE.L  D1,(A1)         Set ELOC to HEX value
000016D6                           741  
000016D6  B2BC 00000000            742          CMP.L   #0,D1           Compare ending location to 0
000016DC  6700 03EA                743          BEQ     DONE            End program if 0
000016E0                           744          
000016E0  B2BC 00007000            745          CMP.L   #MNADDR,D1      Compare min ending location to min
000016E6  63A4                     746          BLS     ILL2            Branch to ILL2 if <= min
000016E8                           747          
000016E8  B2BC 00FFFFFF            748          CMP.L   #MXADDR,D1      Compare ending location to max
000016EE  62AA                     749          BHI     ILL3            Branch to ILL3 if > max
000016F0                           750          
000016F0  2038 1004                751          MOVE.L  (SLOC),D0       Move starting location data to D0
000016F4  B280                     752          CMP.L   D0,D1           Compare ending location to starting location
000016F6  6394                     753          BLS     ILL2            Branch to ILL3 if <= starting location
000016F8                           754          
000016F8  21F8 1004 1000           755  PRMPTDN MOVE.L  SLOC,GBUFF      Store starting location in GBUFF for OP
000016FE  6000 03AC                756          BRA     DSPHDR          Branch to display method
00001702                           757  
00001702                           758  *
00001702                           759  * Display string: Displays string until NULL char
00001702                           760  * Input string at A1, output length of string at D1.B
00001702                           761  * Max length: 255
00001702                           762  *
00001702                           763          
00001702  48E7 E040                764  DSPSTR  MOVEM.L D0-D2/A1,-(SP)  Push D0-D2, and A1 to stack
00001706  243C 000000FF            765          MOVE.L  #255,D2         Set count to 255
0000170C  51CA 0006                766  DSPSTLP DBRA    D2,*+8          Decrement count; if count is > 0, do not branch to return
00001710  6000 0016                767          BRA     DSPSTRT         If count is <= 0, branch to return
00001714  1019                     768          MOVE.B  (A1)+,D0        Get HEX byte in D0, post-increment A1
00001716  B03C 0000                769          CMP.B   #0,D0           Check if byte is NULL char
0000171A  6700 000C                770          BEQ     DSPSTRT         If byte is NULL char, branch to return
0000171E  6100 FDA2                771          BSR     HEX2ASCII       Else, get ASCII in D1
00001722  6100 FE8C                772          BSR     DSPAX           Display ASCII
00001726  60E4                     773          BRA     DSPSTLP         Loop back
00001728  4482                     774  DSPSTRT NEG.L   D2              Negate count
0000172A  0682 000000FE            775          ADD.L   #254,D2         Add 254; effectively 255 - count - null byte
00001730  4CDF 0003                776          MOVEM.L (SP)+,D0/D1     Restore D0 and D1
00001734  1202                     777          MOVE.B  D2,D1           Move length to D1
00001736  4CDF 0204                778          MOVEM.L (SP)+,D2/A1     Restore D2 and A1
0000173A  4E75                     779          RTS                     Return to caller
0000173C                           780  
0000173C                           781  *
0000173C                           782  * Display offset space: Display space according to offset length
0000173C                           783  * Input offset length in D2.B
0000173C                           784  *
0000173C                           785  
0000173C  48E7 E000                786  DSPOFS  MOVEM.L D0-D2,-(SP)     Push D0-D2 to stack
00001740                           787          * Ensure count is strictly in one byte
00001740  4280                     788          CLR.L   D0
00001742  1002                     789          MOVE.B  D2,D0
00001744  2400                     790          MOVE.L  D0,D2
00001746  51CA 0006                791  DSPOFLP DBRA    D2,*+8          Decrement count; if count is > 0, do not branch to return
0000174A  6000 000E                792          BRA     DSPOFRT         If count is <= 0, branch to return
0000174E  103C 0006                793          MOVE.B  #6,D0           Display character
00001752  123C 0020                794          MOVE.B  #' ',D1         Read space
00001756  4E4F                     795          TRAP    #15
00001758  60EC                     796          BRA     DSPOFLP         Loop back
0000175A  4CDF 0007                797  DSPOFRT MOVEM.L (SP)+,D0-D2     Restore D0-D2
0000175E  4E75                     798          RTS                     Return to callr
00001760                           799  
00001760                           800  *
00001760                           801  * Display operand: Displays operand according to mode and register
00001760                           802  * Input mode in D2.B, input reg in D3.B
00001760                           803  *
00001760                           804  
00001760  48E7 E000                805  DISPOP  MOVEM.L D0-D2,-(SP)         Push D0-D2 to stack
00001764  103C 0006                806          MOVE.B  #6,D0               Display character
00001768  C4FC 0004                807          MULU.W  #4,D2
0000176C  4EFB 2002                808          JMP     MODTBL(PC,D2.W)     Jump to mode
00001770  6000 001E                809  MODTBL  BRA     DISP0               Dn
00001774  6000 002A                810          BRA     DISP1               An
00001778  6000 0036                811          BRA     DISP2               (An)
0000177C  6000 0052                812          BRA     DISP3               (An)+
00001780  6000 0074                813          BRA     DISP4               -(An)
00001784  6000 0096                814          BRA     DISP5               (d,An)
00001788  6000 00AE                815          BRA     DISP6               (d,An,Xn)
0000178C  6000 00D2                816          BRA     DISP7               (XXX).W/(XXX).L/(d,PC)/(d,PC,Xn)/#data
00001790                           817  * Dn            000 XXX
00001790  123C 0044                818  DISP0   MOVE.B  #'D',D1             Read D
00001794  4E4F                     819          TRAP    #15
00001796  2003                     820          MOVE.L  D3,D0               Read reg from D3
00001798  6100 FE46                821          BSR     DSPHXN              Display as hex nibble
0000179C  6000 0188                822          BRA     DISPD               Branch to return
000017A0                           823  * An            001 XXX
000017A0  123C 0041                824  DISP1   MOVE.B  #'A',D1             Read A
000017A4  4E4F                     825          TRAP    #15
000017A6  2003                     826          MOVE.L  D3,D0               Read reg from D3
000017A8  6100 FE36                827          BSR     DSPHXN              Display as hex byte
000017AC  6000 0178                828          BRA     DISPD               Branch to return
000017B0                           829  * (An)          010 XXX
000017B0  123C 0028                830  DISP2   MOVE.B  #'(',D1             Read (
000017B4  4E4F                     831          TRAP    #15
000017B6  123C 0041                832          MOVE.B  #'A',D1             Read A
000017BA  4E4F                     833          TRAP    #15
000017BC  2003                     834          MOVE.L  D3,D0               Read reg from D3
000017BE  6100 FE20                835          BSR     DSPHXN              Display as hex nibble
000017C2  103C 0006                836          MOVE.B  #6,D0               Display character
000017C6  123C 0029                837          MOVE.B  #')',D1             Read )
000017CA  4E4F                     838          TRAP    #15
000017CC  6000 0158                839          BRA     DISPD               Branch to return
000017D0                           840  * (An)+         011 XXX
000017D0  123C 0028                841  DISP3   MOVE.B  #'(',D1             Read (
000017D4  4E4F                     842          TRAP    #15
000017D6  123C 0041                843          MOVE.B  #'A',D1             Read A
000017DA  4E4F                     844          TRAP    #15
000017DC  2003                     845          MOVE.L  D3,D0               Read reg from D3
000017DE  6100 FE00                846          BSR     DSPHXN              Display as hex nibble
000017E2  103C 0006                847          MOVE.B  #6,D0               Display character
000017E6  123C 0029                848          MOVE.B  #')',D1             Read )
000017EA  4E4F                     849          TRAP    #15
000017EC  123C 002B                850          MOVE.B  #'+',D1             Read +
000017F0  4E4F                     851          TRAP    #15
000017F2  6000 0132                852          BRA     DISPD               Branch to return
000017F6                           853  * -(An)         100 XXX
000017F6  123C 002D                854  DISP4   MOVE.B  #'-',D1             Read +
000017FA  4E4F                     855          TRAP    #15
000017FC  123C 0028                856          MOVE.B  #'(',D1             Read (
00001800  4E4F                     857          TRAP    #15
00001802  123C 0041                858          MOVE.B  #'A',D1             Read A
00001806  4E4F                     859          TRAP    #15
00001808  2003                     860          MOVE.L  D3,D0               Read reg from D3
0000180A  6100 FDD4                861          BSR     DSPHXN              Display as hex nibble
0000180E  103C 0006                862          MOVE.B  #6,D0               Display character
00001812  123C 0029                863          MOVE.B  #')',D1             Read )
00001816  4E4F                     864          TRAP    #15
00001818  6000 010C                865          BRA     DISPD               Branch to return
0000181C                           866  * (d,An)        101 XXX
0000181C  123C 0028                867  DISP5   MOVE.B  #'(',D1             Read (
00001820  4E4F                     868          TRAP    #15
00001822                           869          *----TODO---*
00001822                           870          * Display d *
00001822  123C 002C                871          MOVE.B  #',',D1             Read ,
00001826  4E4F                     872          TRAP    #15
00001828  123C 0041                873          MOVE.B  #'A',D1             Read A
0000182C  4E4F                     874          TRAP    #15
0000182E                           875          *----TODO---*
0000182E                           876          * Display A *
0000182E  123C 0029                877          MOVE.B  #')',D1             Read )
00001832  4E4F                     878          TRAP    #15
00001834  6000 00F0                879          BRA     DISPD               Branch to return
00001838                           880  * (d,An,Xn)     110 XXX
00001838  123C 0028                881  DISP6   MOVE.B  #'(',D1             Read (
0000183C  4E4F                     882          TRAP    #15
0000183E                           883          *----TODO---*
0000183E                           884          * Display d *
0000183E  123C 002C                885          MOVE.B  #',',D1             Read ,
00001842  4E4F                     886          TRAP    #15
00001844  123C 0041                887          MOVE.B  #'A',D1             Read A
00001848  4E4F                     888          TRAP    #15
0000184A                           889          *----TODO---*
0000184A                           890          * Display A *
0000184A  123C 002C                891          MOVE.B  #',',D1             Read ,
0000184E  4E4F                     892          TRAP    #15
00001850  123C 0058                893          MOVE.B  #'X',D1             Read X
00001854  4E4F                     894          TRAP    #15
00001856                           895          *----TODO---*
00001856                           896          * Display X *
00001856  123C 0029                897          MOVE.B  #')',D1             Read )
0000185A  4E4F                     898          TRAP    #15
0000185C  6000 00C8                899          BRA     DISPD               Branch to return
00001860                           900  * (XXX).W/(XXX).L/(d,PC)/(d,PC,Xn)/#data
00001860  C6FC 0004                901  DISP7   MULU.W  #4,D3
00001864  4EFB 3002                902          JMP     REGTBL(PC,D3.W)     Jump to reg
00001868  6000 0012                903  REGTBL  BRA     DISP8               (XXX).W
0000186C  6000 002A                904          BRA     DISP9               (XXX).L
00001870  6000 0042                905          BRA     DISPA               (d,PC)
00001874  6000 0060                906          BRA     DISPB               (d,PC,Xn)
00001878  6000 008A                907          BRA     DISPC               #data
0000187C                           908  * (XXX.W)       111 000
0000187C                           909  DISP8   
0000187C  123C 0024                910          MOVE.B  #'$',D1             Read $
00001880  4E4F                     911          TRAP    #15
00001882  2278 1010                912          MOVEA.L IOADDR,A1           Point A1 to the instruction address
00001886  4282                     913          CLR.L   D2
00001888  143C 0002                914          MOVE.B  #2,D2               Read word size to D2
0000188C  6100 FD2C                915          BSR     DSPHXA              Display address
00001890  D5B8 1010                916          ADD.L   D2,(IOADDR)         Advance IO address by word
00001894  6000 0090                917          BRA     DISPD               Branch to return
00001898                           918  * (XXX.L)       111 001
00001898  123C 0024                919  DISP9   MOVE.B  #'$',D1             Read $
0000189C  4E4F                     920          TRAP    #15
0000189E  2278 1010                921          MOVEA.L IOADDR,A1           Point A1 to the instruction address
000018A2  4282                     922          CLR.L   D2
000018A4  143C 0004                923          MOVE.B  #4,D2               Read long size to D2
000018A8  6100 FD10                924          BSR     DSPHXA              Display address
000018AC  D5B8 1010                925          ADD.L   D2,(IOADDR)         Advance IO address by long
000018B0  6000 0074                926          BRA     DISPD               Branch to return
000018B4                           927  * (d,PC)        111 010
000018B4  123C 0028                928  DISPA   MOVE.B  #'(',D1             Read (
000018B8  4E4F                     929          TRAP    #15
000018BA                           930          *----TODO---*
000018BA                           931          * Display d *
000018BA  123C 002C                932          MOVE.B  #',',D1             Read ,
000018BE  4E4F                     933          TRAP    #15
000018C0  123C 0050                934          MOVE.B  #'P',D1             Read P
000018C4  4E4F                     935          TRAP    #15
000018C6  123C 0043                936          MOVE.B  #'C',D1             Read C
000018CA  4E4F                     937          TRAP    #15
000018CC  123C 0029                938          MOVE.B  #')',D1             Read )
000018D0  4E4F                     939          TRAP    #15
000018D2  6000 0052                940          BRA     DISPD
000018D6                           941  * (d,PC,Xn)     111 011
000018D6  123C 0028                942  DISPB   MOVE.B  #'(',D1             Read (
000018DA  4E4F                     943          TRAP    #15
000018DC                           944          *----TODO---*
000018DC                           945          * Display d *
000018DC  123C 002C                946          MOVE.B  #',',D1             Read ,
000018E0  4E4F                     947          TRAP    #15
000018E2  123C 0050                948          MOVE.B  #'P',D1             Read P
000018E6  4E4F                     949          TRAP    #15
000018E8  123C 0043                950          MOVE.B  #'C',D1             Read C
000018EC  4E4F                     951          TRAP    #15
000018EE  123C 002C                952          MOVE.B  #',',D1             Read ,
000018F2  4E4F                     953          TRAP    #15
000018F4  123C 0058                954          MOVE.B  #'X',D1             Read X
000018F8  4E4F                     955          TRAP    #15
000018FA                           956          *----TODO---*
000018FA                           957          * Display X *
000018FA  123C 0029                958          MOVE.B  #')',D1             Read )
000018FE  4E4F                     959          TRAP    #15
00001900  6000 0024                960          BRA     DISPD               Branch to return
00001904                           961  * #<data>       111 100
00001904  123C 0023                962  DISPC   MOVE.B  #'#',D1             Read #
00001908  4E4F                     963          TRAP    #15
0000190A  2278 1010                964          MOVEA.L IOADDR,A1           Point A1 to the instruction address
0000190E  4282                     965          CLR.L   D2
00001910  1438 100E                966          MOVE.B  (IOSIZE),D2         Read instruction size to D2
00001914  C4FC 0002                967          MULU.W  #2,D2               Translate size to value
00001918  6100 FCA0                968          BSR     DSPHXA              Display address
0000191C  D3C2                     969          ADD.L   D2,A1               Advance A1 by instruction size
0000191E  21C9 1010                970          MOVE.L  A1,(IOADDR)         Move A1 to IOADDR
00001922  6000 0002                971          BRA     DISPD               Branch to return
00001926  4CDF 0007                972  DISPD   MOVEM.L (SP)+,D0-D2         Restore D0-D2
0000192A  4E75                     973          RTS                         Return to caller
0000192C                           974          
0000192C  11F8 100C 100D           975  BRBAD   MOVE.B  (IOOPCD),(IOBDCD)   Move OPCODE to BAD OPCODE
00001932  11FC 0087 100C           976          MOVE.B  #$87,(IOOPCD)       Set OPCODE to BAD
00001938  54B8 1000                977          ADD.L   #$2,(GBUFF)         Advance the buffer
0000193C                           978  PRINT   *----TODO----*
0000193C                           979          * If OP code exists as BAD and BAD OPCODE don't exist, assume that the last
0000193C                           980          * OP display was BAD, and display then next word as raw data
0000193C  0C38 00FF 100C           981          CMP.B   #$FF,(IOOPCD)       Test if OP code exists
00001942  67E8                     982          BEQ     BRBAD               If it does not, display BAD
00001944                           983  
00001944  2038 1010                984          MOVE.L  (IOADDR),D0         Read memory location
00001948  6100 FCD0                985          BSR     DSPHXL              Display as hex long
0000194C  103C 0006                986          MOVE.B  #6,D0               Display character
00001950  123C 0009                987          MOVE.B  #TB,D1              Read tab
00001954  4E4F                     988          TRAP    #15
00001956                           989  
00001956  4280                     990          CLR.L   D0
00001958  4282                     991          CLR.L   D2
0000195A  43F8 1015                992          LEA     OPNAME,A1           Read OP-code
0000195E  1038 100C                993          MOVE.B  (IOOPCD),D0         Get offset
00001962  D3C0                     994          ADD.L   D0,A1               Add offset
00001964  6100 FD9C                995          BSR     DSPSTR              Display string until NULL char and get length in D1.B
00001968  1401                     996          MOVE.B  D1,D2               Store length in D2 to be used as space offset
0000196A                           997      
0000196A  0C38 00FF 100D           998          CMP.B   #$FF,(IOBDCD)       Test if BAD OP code exists
00001970  6732                     999          BEQ     *+52                If it doesn't exist, don't display it
00001972  103C 0006               1000          MOVE.B  #6,D0               Display character
00001976  123C 0020               1001          MOVE.B  #' ',D1             Read space
0000197A  4E4F                    1002          TRAP    #15
0000197C  123C 0028               1003          MOVE.B  #'(',D1             Read (
00001980  4E4F                    1004          TRAP    #15
00001982  43F8 1015               1005          LEA     OPNAME,A1           Read OP-code
00001986  1038 100D               1006          MOVE.B  (IOBDCD),D0         Get offset
0000198A  D3C0                    1007          ADD.L   D0,A1               Add offset
0000198C  6100 FD74               1008          BSR     DSPSTR              Display string until NULL char and get length in D1.B
00001990  D401                    1009          ADD.B   D1,D2               Add length to space offset
00001992  103C 0006               1010          MOVE.B  #6,D0               Display character
00001996  123C 003F               1011          MOVE.B  #'?',D1
0000199A  4E4F                    1012          TRAP    #15                 Read ?
0000199C  123C 0029               1013          MOVE.B  #')',D1             Read )
000019A0  4E4F                    1014          TRAP    #15
000019A2  5402                    1015          ADD.B   #2,D2               Add 2 to space offset to account for ( and )
000019A4                          1016  
000019A4  43F8 10B3               1017          LEA     IOOPSZ,A1           Read OP code size
000019A8  103C 0003               1018          MOVE.B  #$03,D0             Set size to 3
000019AC  0C38 00FF 100E          1019          CMP.B   #$FF,(IOSIZE)       Test if OP size exists
000019B2  6704                    1020          BEQ     *+6                 If OP size doesn't exist, skip the next line
000019B4  1038 100E               1021          MOVE.B  (IOSIZE),D0         If OP size exists, move it to D0
000019B8  C0FC 0003               1022          MULU.W  #$3,D0              Multiply size by 3 for correct offset
000019BC  D3C0                    1023          ADD.L   D0,A1               Add offset
000019BE  6100 FD42               1024          BSR     DSPSTR              Display string until NULL char and get length in D1.B
000019C2                          1025          
000019C2  D401                    1026          ADD.B   D1,D2               Add length to space offset
000019C4  4442                    1027          NEG.W   D2                  Negate space offset
000019C6  0642 000B               1028          ADD.W   #11,D2              Add 11 to space offset; effectively 11 - space offset
000019CA                          1029  
000019CA  6100 FD70               1030          BSR     DSPOFS              Display space offset with tab
000019CE                          1031  
000019CE  54B8 1010               1032          ADD.L   #2,(IOADDR)         Move memory location past first word
000019D2                          1033  
000019D2  4204                    1034          CLR.B   D4                  Set source to false
000019D4  4242                    1035          CLR.W   D2
000019D6  4243                    1036          CLR.W   D3
000019D8  1438 10C1               1037          MOVE.B  (SMD),D2            Read source mode to D2
000019DC  B43C 00FF               1038          CMP.B   #$FF,D2             Test if it exists
000019E0  6700 0016               1039          BEQ     NOSRC               If it does not exist, do not display source
000019E4  1638 10C2               1040          MOVE.B  (SRG),D3            Read source reg to D3
000019E8  B63C 00FF               1041          CMP.B   #$FF,D3             Test if it exists
000019EC  6700 000A               1042          BEQ     NOSRC               If it does not exist, do not display source
000019F0  6100 FD6E               1043          BSR     DISPOP              If both mode & register exist, display accordingly
000019F4  183C 0001               1044          MOVE.B  #1,D4               Set source to true
000019F8                          1045  
000019F8  4242                    1046  NOSRC   CLR.W   D2
000019FA  4243                    1047          CLR.W   D3
000019FC  1438 10BF               1048          MOVE.B  (DMD),D2            Read dest mode to D2
00001A00  B43C 00FF               1049          CMP.B   #$FF,D2             Test if it exists
00001A04  6700 0024               1050          BEQ     NODST               If it does not exist, do not display dest
00001A08  1638 10C0               1051          MOVE.B  (DRG),D3            Read dest reg to D3
00001A0C  B63C 00FF               1052          CMP.B   #$FF,D3             Test if it exists
00001A10  6700 0018               1053          BEQ     NODST               If it does not exist, do not display dest
00001A14                          1054  
00001A14  103C 0006               1055          MOVE.B  #6,D0               Display character
00001A18  123C 002C               1056          MOVE.B  #',',D1             Read comma
00001A1C  B83C 0001               1057          CMP.B   #1,D4               Test if source was displayed
00001A20  6600 0000               1058          BNE     *+2                 If it was not displayed, don't display a comma
00001A24  4E4F                    1059          TRAP    #15                 If it was displayed, display a comma
00001A26                          1060  
00001A26  6100 FD38               1061          BSR     DISPOP              If both mode & register exist, display accordingly
00001A2A                          1062  
00001A2A  103C 0006               1063  NODST   MOVE.B  #6,D0               Display character
00001A2E  123C 0009               1064          MOVE.B  #TB,D1              Read tab
00001A32  4E4F                    1065          TRAP    #15
00001A34                          1066  
00001A34  123C 000D               1067          MOVE.B  #CR,D1
00001A38  4E4F                    1068          TRAP    #15
00001A3A  123C 000A               1069          MOVE.B  #LF,D1
00001A3E  4E4F                    1070          TRAP    #15
00001A40                          1071  
00001A40                          1072          *DISPLAY IO OPERAND
00001A40                          1073          
00001A40  2078 1000               1074          MOVE.L  GBUFF,A0            Set A0 to ELOC location
00001A44  B1F8 1008               1075          CMPA.L  ELOC,A0             Compare next buffer to ending location
00001A48  6C00 007E               1076          BGE     DONE                Branch to DONE if >= ending location
00001A4C                          1077  
00001A4C  5238 1014               1078          ADD.B   #1,IOLC
00001A50  0C38 001E 1014          1079          CMP.B   #30,IOLC            Compare #30 to line counter
00001A56  6700 0030               1080          BEQ     PAUSE               If ==, branch to PAUSE
00001A5A                          1081  
00001A5A                          1082          * Reset IO instruction values
00001A5A  11FC 00FF 10C1          1083          MOVE.B  #$FF,(SMD)
00001A60  11FC 00FF 10C2          1084          MOVE.B  #$FF,(SRG)
00001A66  11FC 00FF 10BF          1085          MOVE.B  #$FF,(DMD)
00001A6C  11FC 00FF 10C0          1086          MOVE.B  #$FF,(DRG)
00001A72  11FC 00FF 100C          1087          MOVE.B  #$FF,(IOOPCD)
00001A78  11FC 00FF 100D          1088          MOVE.B  #$FF,(IOBDCD)
00001A7E  11FC 00FF 100E          1089          MOVE.B  #$FF,(IOSIZE)
00001A84                          1090  
00001A84  6000 005A               1091          BRA     OP                  Branch to OP for next instruction
00001A88                          1092  
00001A88  43F8 135B               1093  PAUSE   LEA     MSSG4,A1            Display keypress prompt
00001A8C  103C 000E               1094          MOVE.B  #14,D0
00001A90  4E4F                    1095          TRAP    #15
00001A92  103C 000C               1096          MOVE.B  #12,D0              Hide keyboard input
00001A96  123C 0000               1097          MOVE.B  #0,D1
00001A9A  4E4F                    1098          TRAP    #15
00001A9C  103C 0005               1099          MOVE.B  #5,D0               Request keyboard input
00001AA0  4E4F                    1100          TRAP    #15
00001AA2                          1101  *----TODO----*
00001AA2                          1102  * Test if keycode was for ENTER
00001AA2  103C 000C               1103          MOVE.B  #12,D0              Show keyboard input
00001AA6  123C 0001               1104          MOVE.B  #1,D1
00001AAA  4E4F                    1105          TRAP    #15
00001AAC  103C 000B               1106  DSPHDR  MOVE.B  #11,D0              Clear the screen
00001AB0  323C FF00               1107          MOVE.W  #$FF00,D1
00001AB4  4E4F                    1108          TRAP    #15
00001AB6  43F8 13A5               1109          LEA     HEADR,A1            Display header
00001ABA  103C 000E               1110          MOVE.B  #14,D0
00001ABE  4E4F                    1111          TRAP    #15
00001AC0  4238 1014               1112          CLR.B   (IOLC)              Reset line counter
00001AC4  6000 001A               1113          BRA     OP
00001AC8                          1114  
00001AC8  43F8 137C               1115  DONE    LEA     MSSG5,A1            Display end message
00001ACC  103C 000E               1116          MOVE.B  #14,D0
00001AD0  4E4F                    1117          TRAP    #15
00001AD2  103C 0009               1118          MOVE.B  #9,D0
00001AD6  4E4F                    1119          TRAP    #15
00001AD8                          1120  
00001AD8                          1121  *--------------------
00001AD8                          1122  *   OP
00001AD8                          1123  *--------------------
00001AD8                          1124  
00001AD8                          1125  * Swap data registers: Swaps d0 and d1
00001AD8  2F00                    1126  SWAPDR  MOVE.L  D0,-(SP)
00001ADA  2001                    1127          MOVE.L  D1,D0
00001ADC  221F                    1128          MOVE.L  (SP)+,D1
00001ADE  4E75                    1129          RTS
00001AE0                          1130  
00001AE0  2078 1000               1131  OP      MOVE.L  GBUFF,A0        Set A0 to GBUFF location
00001AE4  0C90 FFFFFFFF           1132          CMP.L   #$FFFFFFFF,(A0) Check for end
00001AEA  67DC                    1133          BEQ     DONE            If end, branch to DONE
00001AEC  3018                    1134          MOVE.W  (A0)+,D0        Transfer word data to D0, post-increment location
00001AEE  3210                    1135          MOVE.W  (A0),D1         Transfer next word data to D1
00001AF0  21F8 1000 1010          1136          MOVE.L  GBUFF,IOADDR    Set memory location for IO
00001AF6                          1137  
00001AF6                          1138  
00001AF6                          1139          * Mask bits to determine OP-code and branch correspondingly-- high order bits are checked first
00001AF6                          1140          
00001AF6                          1141          * LSL:    1110001111XXXXXX
00001AF6  343C E3C0               1142          MOVE.W  #%1110001111000000,D2
00001AFA  363C 1C00               1143          MOVE.W  #%0001110000000000,D3
00001AFE  6100 FA6A               1144          BSR     CMPMSK
00001B02  6700 04AC               1145          BEQ     BRLSL
00001B06                          1146  
00001B06                          1147          * LSL:    1110XXX1XXX01XXX
00001B06  343C E108               1148          MOVE.W  #%1110000100001000,D2
00001B0A  363C 1010               1149          MOVE.W  #%0001000000010000,D3
00001B0E  6100 FA5A               1150          BSR     CMPMSK
00001B12  6700 049C               1151          BEQ     BRLSL
00001B16                          1152  
00001B16                          1153          * LSR:    1110001011XXXXXX
00001B16  343C E2C0               1154          MOVE.W  #%1110001011000000,D2
00001B1A  363C 1D00               1155          MOVE.W  #%0001110100000000,D3
00001B1E  6100 FA4A               1156          BSR     CMPMSK
00001B22  6700 0496               1157          BEQ     BRLSR
00001B26                          1158  
00001B26                          1159          * LSR:    1110XXX0XXX01XXX
00001B26  343C E008               1160          MOVE.W  #%1110000000001000,D2
00001B2A  363C 1110               1161          MOVE.W  #%0001000100010000,D3
00001B2E  6100 FA3A               1162          BSR     CMPMSK
00001B32  6700 0486               1163          BEQ     BRLSR
00001B36                          1164  
00001B36                          1165          * ASL:    1110000111XXXXXX
00001B36  343C E1C0               1166          MOVE.W  #%1110000111000000,D2
00001B3A  363C 1E00               1167          MOVE.W  #%0001111000000000,D3
00001B3E  6100 FA2A               1168          BSR     CMPMSK
00001B42  6700 0458               1169          BEQ     BRASL
00001B46                          1170  
00001B46                          1171          * ASL:    1110XXX1XXX00XXX
00001B46  343C E100               1172          MOVE.W  #%1110000100000000,D2
00001B4A  363C 1018               1173          MOVE.W  #%0001000000011000,D3
00001B4E  6100 FA1A               1174          BSR     CMPMSK
00001B52  6700 0448               1175          BEQ     BRASL
00001B56                          1176  
00001B56                          1177          * ASR:    1110000011XXXXXX
00001B56  343C E0C0               1178          MOVE.W  #%1110000011000000,D2
00001B5A  363C 1F00               1179          MOVE.W  #%0001111100000000,D3
00001B5E  6100 FA0A               1180          BSR     CMPMSK
00001B62  6700 0442               1181          BEQ     BRASR
00001B66                          1182  
00001B66                          1183          * ASR:    1110XXX0XXX00XXX
00001B66  343C E000               1184          MOVE.W  #%1110000000000000,D2
00001B6A  363C 1118               1185          MOVE.W  #%0001000100011000,D3
00001B6E  6100 F9FA               1186          BSR     CMPMSK
00001B72  6700 0428               1187          BEQ     BRASL
00001B76                          1188  
00001B76                          1189          * ADD:    1101XXXXXXXXXXXX
00001B76                          1190          * ADDA
00001B76  343C D000               1191          MOVE.W  #%1101000000000000,D2
00001B7A  363C 2000               1192          MOVE.W  #%0010000000000000,D3
00001B7E  6100 F9EA               1193          BSR     CMPMSK
00001B82  6700 02B2               1194          BEQ     BRADD
00001B86                          1195  
00001B86                          1196          * ADDI:   00000110XXXXXXXX
00001B86  343C 0600               1197          MOVE.W  #%0000011000000000,D2
00001B8A  363C F900               1198          MOVE.W  #%1111100100000000,D3
00001B8E  6100 F9DA               1199          BSR     CMPMSK
00001B92  6700 02FE               1200          BEQ     BRADDI
00001B96                          1201  
00001B96                          1202          * AND:    1100XXXXXXXXXXXX
00001B96  343C C000               1203          MOVE.W  #%1100000000000000,D2
00001B9A  363C 3000               1204          MOVE.W  #%0011000000000000,D3
00001B9E  6100 F9CA               1205          BSR     CMPMSK
00001BA2  6700 02F8               1206          BEQ     BRAND
00001BA6                          1207  
00001BA6                          1208          * MULU:   0100110000XXXXXX
00001BA6  343C 4C00               1209          MOVE.W  #%0100110000000000,D2
00001BAA  363C B3C0               1210          MOVE.W  #%1011001111000000,D3
00001BAE  6100 F9BA               1211          BSR     CMPMSK
00001BB2  6618                    1212          BNE     *+26
00001BB4  6100 FF22               1213          BSR     SWAPDR
00001BB8                          1214          * nxt wrd 0XXX0X0000000XXX
00001BB8  343C 0000               1215          MOVE.W  #%0000000000000000,D2
00001BBC  363C 8BF8               1216          MOVE.W  #%1000101111111000,D3
00001BC0  6100 F9A8               1217          BSR     CMPMSK
00001BC4  6700 03FE               1218          BEQ     BRMULU
00001BC8  6100 FF0E               1219          BSR     SWAPDR
00001BCC                          1220  
00001BCC                          1221          * CMP:    1011XXXXXXXXXXXX
00001BCC                          1222          * CMPA
00001BCC  343C B000               1223          MOVE.W  #%1011000000000000,D2
00001BD0  363C 4000               1224          MOVE.W  #%0100000000000000,D3
00001BD4  6100 F994               1225          BSR     CMPMSK
00001BD8  6700 0320               1226          BEQ     BRCMP
00001BDC                          1227  
00001BDC                          1228          * CMPI:   00001100XXXXXXXX
00001BDC  343C 0C00               1229          MOVE.W  #%0000110000000000,D2
00001BE0  363C F300               1230          MOVE.W  #%1111001100000000,D3
00001BE4  6100 F984               1231          BSR     CMPMSK
00001BE8  6700 0324               1232          BEQ     BRCMPI
00001BEC                          1233  
00001BEC                          1234          * EOR:    1011XXXXXXXXXXXX
00001BEC  343C B000               1235          MOVE.W  #%1011000000000000,D2
00001BF0  363C 4000               1236          MOVE.W  #%0100000000000000,D3
00001BF4  6100 F974               1237          BSR     CMPMSK
00001BF8  6700 03DE               1238          BEQ     BREOR
00001BFC                          1239  
00001BFC                          1240          * EORI:   00001010XXXXXXXX
00001BFC  343C 0A00               1241          MOVE.W  #%0000101000000000,D2
00001C00  363C F500               1242          MOVE.W  #%1111010100000000,D3
00001C04  6100 F964               1243          BSR     CMPMSK
00001C08  6700 03E2               1244          BEQ     BREORI
00001C0C                          1245  
00001C0C                          1246          * DIVS:   0100110001XXXXXX
00001C0C  343C 4C40               1247          MOVE.W  #%0100110001000000,D2
00001C10  363C B380               1248          MOVE.W  #%1011001110000000,D3
00001C14  6100 F954               1249          BSR     CMPMSK
00001C18  6618                    1250          BNE     *+26
00001C1A  6100 FEBC               1251          BSR     SWAPDR
00001C1E                          1252          * nxt wrd 0XXX1X0000000XXX
00001C1E  343C 0800               1253          MOVE.W  #%0000100000000000,D2
00001C22  363C 83F8               1254          MOVE.W  #%1000001111111000,D3
00001C26  6100 F942               1255          BSR     CMPMSK
00001C2A  6700 03A2               1256          BEQ     BRDIVS
00001C2E  6100 FEA8               1257          BSR     SWAPDR
00001C32                          1258  
00001C32                          1259          * MOVEQ:  0111XXX0XXXXXXXX
00001C32  343C 7000               1260          MOVE.W  #%0111000000000000,D2
00001C36  363C 8100               1261          MOVE.W  #%1000000100000000,D3
00001C3A  6100 F92E               1262          BSR     CMPMSK
00001C3E  6700 0352               1263          BEQ     BRMOVEQ
00001C42                          1264  
00001C42                          1265          * BCC:    01100000XXXXXXXX
00001C42  343C 6000               1266          MOVE.W  #%0110000000000000,D2
00001C46  363C 9F00               1267          MOVE.W  #%1001111100000000,D3
00001C4A  6100 F91E               1268          BSR     CMPMSK
00001C4E  6700 0260               1269          BEQ     BRBCC
00001C52                          1270  
00001C52                          1271          * ADDQ:   0101XXXXXXXXXXXX
00001C52  343C 5000               1272          MOVE.W  #%0101000000000000,D2
00001C56  363C A000               1273          MOVE.W  #%1010000000000000,D3
00001C5A  6100 F8FA               1274          BSR     TSTMSK
00001C5E  6700 0228               1275          BEQ     BRADDQ
00001C62                          1276  
00001C62                          1277          * RTS:    0100111001110101
00001C62  B07C 4E45               1278          CMP.W   #%0100111001000101,D0
00001C66  6700 02B0               1279          BEQ     BRRTS
00001C6A                          1280  
00001C6A                          1281          * JSR:    0100111010XXXXXX
00001C6A  343C 4E80               1282          MOVE.W  #%0100111010000000,D2
00001C6E  363C B140               1283          MOVE.W  #%1011000101000000,D3
00001C72  6100 F8F6               1284          BSR     CMPMSK
00001C76  6700 02B4               1285          BEQ     BRJSR
00001C7A                          1286  
00001C7A                          1287          * NOT:    01000110XXXXXXXX
00001C7A  343C 4600               1288          MOVE.W  #%0100011000000000,D2
00001C7E  363C B900               1289          MOVE.W  #%1011100100000000,D3
00001C82  6100 F8E6               1290          BSR     CMPMSK
00001C86  6700 036E               1291          BEQ     BRNOT
00001C8A                          1292  
00001C8A                          1293  
00001C8A                          1294          * LEA:    0100XXX111XXXXXX
00001C8A  343C 41C0               1295          MOVE.W  #%0100000111000000,D2
00001C8E  363C B000               1296          MOVE.W  #%1011000000000000,D3
00001C92  6100 F8D6               1297          BSR     CMPMSK
00001C96  6700 028A               1298          BEQ     BRLEA
00001C9A                          1299  
00001C9A                          1300          * MOVEM:  01001X001XXXXXXX
00001C9A  343C 4880               1301          MOVE.W  #%0100100010000000,D2
00001C9E  363C B300               1302          MOVE.W  #%1011001100000000,D3
00001CA2  6100 F8C6               1303          BSR     CMPMSK
00001CA6  6700 02DC               1304          BEQ     BRMOVEM
00001CAA                          1305  
00001CAA                          1306          * MOVE:   00XXXXXXXXXXXXXX
00001CAA  343C 0000               1307          MOVE.W  #%0000000000000000,D2
00001CAE  363C C000               1308          MOVE.W  #%1100000000000000,D3
00001CB2  6100 F8B6               1309          BSR     CMPMSK
00001CB6  6700 027E               1310          BEQ     BRMOVE
00001CBA                          1311  
00001CBA                          1312          * CMPI:   00001100XXXXXXXX
00001CBA  343C 0C00               1313          MOVE.W  #%0000110000000000,D2
00001CBE  363C F300               1314          MOVE.W  #%1111001100000000,D3
00001CC2  6100 F8A6               1315          BSR     CMPMSK
00001CC6  6700 0246               1316          BEQ     BRCMPI
00001CCA                          1317  
00001CCA                          1318          * BTST:   0000100000XXXXXX
00001CCA  343C 0800               1319          MOVE.W  #%0000100000000000,D2
00001CCE  363C F7C0               1320          MOVE.W  #%1111011111000000,D3
00001CD2  6100 F896               1321          BSR     CMPMSK
00001CD6  6618                    1322          BNE     *+26
00001CD8  6100 FDFE               1323          BSR     SWAPDR
00001CDC                          1324          * nxt wrd 00000000XXXXXXXX
00001CDC  343C 0000               1325          MOVE.W  #%0000000000000000,D2
00001CE0  363C FF00               1326          MOVE.W  #%1111111100000000,D3
00001CE4  6100 F884               1327          BSR     CMPMSK
00001CE8  6700 01BC               1328          BEQ     BRBTST
00001CEC  6100 FDEA               1329          BSR     SWAPDR
00001CF0                          1330  
00001CF0                          1331          * ORI:    00001010XXXXXXXX
00001CF0  343C 0A00               1332          MOVE.W  #%0000101000000000,D2
00001CF4  363C F500               1333          MOVE.W  #%1111010100000000,D3
00001CF8  6100 F870               1334          BSR     CMPMSK
00001CFC  6700 02E4               1335          BEQ     BRORI
00001D00                          1336  
00001D00                          1337          * SUB:    1001XXXXXXXXXXXX
00001D00                          1338          * SUBA, SUBI
00001D00  343C 9000               1339          MOVE.W  #%1001000000000000,D2
00001D04  363C 6000               1340          MOVE.W  #%0110000000000000,D3
00001D08  6100 F860               1341          BSR     CMPMSK
00001D0C  6700 02F2               1342          BEQ     BRSUB
00001D10                          1343       
00001D10  6000 FC1A               1344          BRA     BRBAD           No mask matched, branch to BRBAD
00001D14                          1345  
00001D14                          1346  *--------------------------
00001D14                          1347  *  Instruction Subroutines
00001D14                          1348  *--------------------------
00001D14                          1349  *
00001D14                          1350  * Advance Buffer: Advances A0 based on the REG & MODE (in that order)
00001D14                          1351  * Input reg & mode in D1.B, output difference to D2
00001D14                          1352  * Todo? May be better to copy buffer to A1 and advance A1
00001D14                          1353  *
00001D14                          1354  
00001D14  1F01                    1355  ADVBFR  MOVE.B  D1,-(SP)        Push D1 to the stack
00001D16  2438 1000               1356          MOVE.L  (GBUFF),D2      Copy buffer to D2
00001D1A  B23C 0007               1357          CMP.B   #$07,D1         Test 000 111 = Address (Word)
00001D1E  6604                    1358          BNE.S   *+6             Branch to next test
00001D20  54B8 1000               1359          ADD.L   #$2,(GBUFF)     Advance buffer by word
00001D24  B23C 000F               1360          CMP.B   #$0F,D1         Test 001 111 = Address (Long)
00001D28  6604                    1361          BNE.S   *+6             Branch to next test
00001D2A  58B8 1000               1362          ADD.L   #$4,(GBUFF)     Advance buffer by long
00001D2E  B23C 0027               1363          CMP.B   #$27,D1         Test 100 111 = Immediate (OP code size)
00001D32  6622                    1364          BNE.S   ADVRET          Branch to return
00001D34  1238 100E               1365          MOVE.B  (IOSIZE),D1     Else, read size to D1
00001D38  B03C 0001               1366          CMP.B   #$1,D0          Test 0 = Byte
00001D3C  6604                    1367          BNE.S   *+6             Branch to next test
00001D3E  54B8 1000               1368          ADD.L   #$2,(GBUFF)     Advance buffer by word (00XBBX)
00001D42  B23C 0001               1369          CMP.B   #$1,D1          Test 1 = Word
00001D46  6604                    1370          BNE.S   *+6             Branch to next test
00001D48  54B8 1000               1371          ADD.L   #$2,(GBUFF)     Advance buffer by word        
00001D4C  B23C 0002               1372          CMP.B   #$2,D1          Test 2 = Long
00001D50  6604                    1373          BNE.S   *+6             Branch to return method
00001D52  58B8 1000               1374          ADD.L   #$4,(GBUFF)     Advance buffer by long
00001D56  4482                    1375  ADVRET  NEG.L   D2              Negate original buffer
00001D58  D4B8 1000               1376          ADD.L   (GBUFF),D2      Add buffer to get difference
00001D5C  121F                    1377          MOVE.B  (SP)+,D1        Restore D1
00001D5E  4E75                    1378          RTS                     Return to caller
00001D60                          1379  
00001D60                          1380  
00001D60                          1381  *
00001D60                          1382  * Standard Size: Test the standard size code
00001D60                          1383  * Inputs size from D0.B, outputs size to IOSIZE (if found)
00001D60                          1384  * Set Z-flag if size was found, or clear Z-flag if size was not found
00001D60                          1385  *
00001D60                          1386  
00001D60  1F01                    1387  SSIZE   MOVE.B  D1,-(SP)    Push D1 to stack
00001D62  123C 00FF               1388          MOVE.B  #$FF,D1     Set size to null
00001D66  B03C 0001               1389          CMP.B   #%01,D0     01 = Byte
00001D6A  6604                    1390          BNE.S   *+6         Branch to next test
00001D6C  123C 0000               1391          MOVE.B  #$0,D1      Set size to byte
00001D70  B03C 0003               1392          CMP.B   #%11,D0     11 = Word
00001D74  6604                    1393          BNE.S   *+6         Branch to next test
00001D76  123C 0001               1394          MOVE.B  #$1,D1      Set size to word
00001D7A  B03C 0002               1395          CMP.B   #%10,D0     10 = Long
00001D7E  6604                    1396          BNE.S   *+6         Branch to next test
00001D80  123C 0002               1397          MOVE.B  #$2,D1      Set size to long
00001D84  B23C 00FF               1398          CMP.B   #$FF,D1     Test if size was found
00001D88  6710                    1399          BEQ     *+18        If it was not found, branch to clear flag      
00001D8A  11C1 100E               1400          MOVE.B  D1,(IOSIZE) If it was found, store size in IOSIZE
00001D8E  121F                    1401          MOVE.B  (SP)+,D1    Restore D1
00001D90  6000 F696               1402          BRA     FLAGST      Set flag & return to caller
00001D94  121F                    1403          MOVE.B  (SP)+,D1    Restore D1
00001D96  6000 F696               1404          BRA     FLAGCL      Clear flag & return to caller
00001D9A                          1405  
00001D9A                          1406  *
00001D9A                          1407  * OP Size: Test the OP size code
00001D9A                          1408  * Inputs size from D0.B, outputs size to IOSIZE (if found), outputs 0 to D1.B for Dn, or 1 to D1.B for <ea> 
00001D9A                          1409  * Set Z-flag if size was found, or clear Z-flag if size was not found
00001D9A                          1410  * OPM (OP-MODE):  Byte | Word | Long | Operation
00001D9A                          1411  *                  000 |  001 |  010 | <ea> + Dn -> Dn
00001D9A                          1412  *                  100 |  101 |  110 | Dn + <ea> -> <ea>
00001D9A                          1413  *
00001D9A                          1414  
00001D9A  1038 10BF               1415  OPSIZE  MOVE.B  (DMD),D0    Get the OP mode from dest mode
00001D9E  123C 0000               1416          MOVE.B  #0,D1       Move 0 to D1 for Dn
00001DA2  B03C 0004               1417          CMP.B   #4,D0       Compare OP mode to 4
00001DA6  6610                    1418          BNE.S   *+18        Branch to next test
00001DA8  5900                    1419          SUB.B   #4,D0       Subtract 4
00001DAA  123C 0001               1420          MOVE.B  #1,D1       Move 1 to D1 for <EA>
00001DAE  123C 00FF               1421          MOVE.B  #$FF,D1     Set size to null
00001DB2  B03C 0000               1422          CMP.B   #%000,D0    000 = Byte
00001DB6  6604                    1423          BNE.S   *+6         Branch to next test
00001DB8  123C 0000               1424          MOVE.B  #$0,D1      Set size to byte
00001DBC  B03C 0001               1425          CMP.B   #%001,D0    001 = Word
00001DC0  6604                    1426          BNE.S   *+6         Branch to next test
00001DC2  123C 0001               1427          MOVE.B  #$1,D1      Set size to word
00001DC6  B03C 0002               1428          CMP.B   #%010,D0    010 = Long
00001DCA  6604                    1429          BNE.S   *+6         Branch to next test
00001DCC  123C 0002               1430          MOVE.B  #$2,D1      Set size to long
00001DD0  B23C 00FF               1431          CMP.B   #$FF,D1     Test if size was found
00001DD4  670C                    1432          BEQ     *+14        If it was not found, branch to clear flag
00001DD6  11C1 100E               1433          MOVE.B  D1,(IOSIZE) If it was found, store size in IOSIZE
00001DDA  6000 F64C               1434          BRA     FLAGST      Set flag & return to caller
00001DDE  6000 F64E               1435          BRA     FLAGCL      Clear the flag & return to caller
00001DE2                          1436  
00001DE2                          1437  *
00001DE2                          1438  * Extract destination: Extracts destination mode to DMD and destination register to DRG from instruction in A0.W
00001DE2                          1439  * Outputs a combination of mode & reg in D1.B
00001DE2                          1440  *
00001DE2                          1441  
00001DE2  48E7 A000               1442  EXDST   MOVEM.L D0/D2,-(SP)     Push D0 and D2 to stack
00001DE6  3010                    1443          MOVE.W  (A0),D0         Move instruction word to D0
00001DE8  243C 000001C0           1444          MOVE.L  #$1C0,D2        Extract dest mode at 0000000111000000
00001DEE  6100 F7A8               1445          BSR     EXTMSK          Get dest mode to D1
00001DF2  11C1 10BF               1446          MOVE.B  D1,(DMD)        Move dest mode to DMD
00001DF6  243C 00000E00           1447          MOVE.L  #$E00,D2        Extract dest reg at 0000111000000000
00001DFC  6100 F79A               1448          BSR     EXTMSK          Get dest reg to D1
00001E00  11C1 10C0               1449          MOVE.B  D1,(DRG)        Move dest reg to (DRG)
00001E04  E709                    1450          LSL.B   #3,D1           Shift the reg 3 bits left
00001E06  8238 10BF               1451          OR.B    (DMD),D1        Add mode after reg
00001E0A  4CDF 0005               1452          MOVEM.L (SP)+,D0/D2     Restore D0 and D2
00001E0E  4E75                    1453          RTS                     Return to caller
00001E10                          1454  
00001E10                          1455  *
00001E10                          1456  * Extract source: Extracts source mode and register
00001E10                          1457  * Inputs instruction from A0, outputs mode to SMD and register to SRG
00001E10                          1458  * Outputs a combination of mode & reg in D1.B
00001E10                          1459  *
00001E10                          1460  
00001E10  48E7 A000               1461  EXSRC   MOVEM.L D0/D2,-(SP)     Push D0 and D2 to stack
00001E14  3010                    1462          MOVE.W  (A0),D0         Move instruction word to D0
00001E16  7438                    1463          MOVE.L  #$38,D2         Extract src mode at 0000000000111000
00001E18  6100 F77E               1464          BSR     EXTMSK          Get src mode to D1
00001E1C  11C1 10C1               1465          MOVE.B  D1,(SMD)        Move src mode to (OMD)
00001E20  7407                    1466          MOVE.L  #$7,D2          Extract src reg at 0000000000000111
00001E22  6100 F774               1467          BSR     EXTMSK          Get src reg to D1
00001E26  11C1 10C2               1468          MOVE.B  D1,(SRG)        Move src reg to (ORG)
00001E2A  E709                    1469          LSL.B   #3,D1           Shift the reg 3 bits left
00001E2C  8238 10C1               1470          OR.B    (SMD),D1        Add mode after reg
00001E30  4CDF 0005               1471          MOVEM.L (SP)+,D0/D2     Restore D0 and D2
00001E34  4E75                    1472          RTS                     Return to caller
00001E36                          1473  
00001E36                          1474  *
00001E36                          1475  * ADD: 1101|REG|OPM|EAM|EAR
00001E36                          1476  *
00001E36                          1477  
00001E36  11FC 0011 100C          1478  BRADD   MOVE.B  #$11,(IOOPCD)   Set OP-code name
00001E3C                          1479  
00001E3C  2078 1000               1480          MOVE.L  GBUFF,A0        Point A0 to GBUFF
00001E40                          1481  
00001E40  61CE                    1482          BSR     EXSRC           Extract EA mode & register
00001E42  619E                    1483          BSR     EXDST           Extract OP mode & register
00001E44                          1484          
00001E44  0C38 0003 10BF          1485          CMP.B   #%011,(DMD)     Compare 011 to OP mode
00001E4A  6606                    1486          BNE.S   *+8             Branch to next test
00001E4C  11FC 0001 100E          1487          MOVE.B  #1,(IOSIZE)     Set size to word
00001E52  0C38 0007 10BF          1488          CMP.B   #%111,(DMD)     Compare 111 to OP mode
00001E58  6606                    1489          BNE.S   *+8             Branch to next test
00001E5A  11FC 0002 100E          1490          MOVE.B  #2,(IOSIZE)     Set size to long
00001E60  0C38 00FF 100E          1491          CMP.B   #$FF,(IOSIZE)   Test if size was found
00001E66  6600 0012               1492          BNE     BRADDA          If size was found, branch to BRADDA        
00001E6A                          1493  
00001E6A  6100 FF2E               1494          BSR     OPSIZE          If size was not found, translate OP mode
00001E6E  6600 FABC               1495          BNE     BRBAD           If size was not found, branch to BAD
00001E72                          1496  
00001E72                          1497          *CMP.B   #1,D1          Compare destination mode to <EA>
00001E72                          1498  
00001E72  54B8 1000               1499          ADD.L   #$2,(GBUFF)     Advace buffer
00001E76  6000 FAC4               1500          BRA     PRINT           Go to next instruction
00001E7A                          1501  
00001E7A                          1502  *
00001E7A                          1503  * ADDA: 1101|REG|OPM|EAM|EAR
00001E7A                          1504  *
00001E7A                          1505  
00001E7A  11FC 0015 100C          1506  BRADDA  MOVE.B  #$15,(IOOPCD)   Set OP-code name
00001E80  54B8 1000               1507          ADD.L   #$2,(GBUFF)     Advance buffer
00001E84  6000 FAB6               1508          BRA     PRINT           Go to next instruction
00001E88                          1509  
00001E88  11FC 001A 100C          1510  BRADDQ  MOVE.B  #$1A,(IOOPCD)       Set OP-code name
00001E8E  6000 FAAC               1511          BRA     PRINT
00001E92                          1512  
00001E92  11FC 0099 100C          1513  BRADDI  MOVE.B  #$99,(IOOPCD)       Set OP-code name
00001E98  6000 FA92               1514          BRA     BRBAD               Not supported
00001E9C                          1515  
00001E9C  11FC 003B 100C          1516  BRAND   MOVE.B  #$3B,(IOOPCD)       Set OP-code name
00001EA2  6000 FA98               1517          BRA     PRINT
00001EA6                          1518  
00001EA6  11FC 0058 100C          1519  BRBTST  MOVE.B  #$58,(IOOPCD)       Set OP-code name
00001EAC  6000 FA8E               1520          BRA     PRINT
00001EB0                          1521  
00001EB0  11FC 006B 100C          1522  BRBCC   MOVE.B  #$6B,(IOOPCD)       Set OP-code name
00001EB6  2078 1000               1523          MOVE.L  GBUFF,A0
00001EBA  3010                    1524          MOVE.W  (A0),D0
00001EBC  243C 000000F0           1525          MOVE.L  #%11110000,D2
00001EC2  6100 F6D4               1526          BSR     EXTMSK
00001EC6  B23C 0006               1527          CMP.B   #%0110,D1
00001ECA  6600 FA60               1528          BNE     BRBAD
00001ECE                          1529         
00001ECE                          1530         * CMP.B   #7,D4
00001ECE                          1531         * BEQ     BRBEQ
00001ECE                          1532         * CMP.B   #13,D4
00001ECE                          1533         * BEQ     BRBLT
00001ECE                          1534         * CMP.B   #6,D4
00001ECE                          1535         * BEQ     BRBNE
00001ECE                          1536         * CMP.B   #2,D4
00001ECE                          1537         * BEQ     BRBHI
00001ECE  6000 FA6C               1538          BRA     PRINT
00001ED2                          1539  
00001ED2  11FC 006F 100C          1540  BRBEQ   MOVE.B  #$6F,(IOOPCD)       Set OP-code name
00001ED8  6000 FA62               1541          BRA     PRINT
00001EDC                          1542          
00001EDC  11FC 0073 100C          1543  BRBLT   MOVE.B  #$73,(IOOPCD)       Set OP-code name
00001EE2  6000 FA58               1544          BRA     PRINT
00001EE6                          1545  
00001EE6  11FC 0077 100C          1546  BRBNE   MOVE.B  #$77,(IOOPCD)       Set OP-code name
00001EEC  6000 FA4E               1547          BRA     PRINT
00001EF0                          1548  
00001EF0  11FC 007B 100C          1549  BRBHI   MOVE.B  #$7B,(IOOPCD)       Set OP-code name
00001EF6  6000 FA44               1550          BRA     PRINT
00001EFA                          1551  
00001EFA  11FC 005D 100C          1552  BRCMP   MOVE.B  #$5D,(IOOPCD)       Set OP-code name
00001F00  6000 FA3A               1553          BRA     PRINT
00001F04                          1554         
00001F04  11FC 0061 100C          1555  BRCMPA  MOVE.B  #$61,(IOOPCD)       Set OP-code name
00001F0A  6000 FA30               1556          BRA     PRINT
00001F0E                          1557    
00001F0E  11FC 0066 100C          1558  BRCMPI  MOVE.B  #$66,(IOOPCD)       Set OP-code name
00001F14  6000 FA26               1559          BRA     PRINT
00001F18                          1560  
00001F18  11FC 0083 100C          1561  BRRTS   MOVE.B  #$83,(IOOPCD)       Set OP-code name
00001F1E  6000 FA1C               1562          BRA     PRINT               Next instruction
00001F22                          1563  
00001F22  11FC 0037 100C          1564  BRLEA   MOVE.B  #$37,(IOOPCD)       Set OP-code name
00001F28  6000 FA12               1565          BRA     PRINT  
00001F2C                          1566  
00001F2C  11FC 007F 100C          1567  BRJSR   MOVE.B  #$7F,(IOOPCD)       Set OP-code name
00001F32  6000 FA08               1568          BRA     PRINT
00001F36                          1569          
00001F36                          1570  *
00001F36                          1571  * Move: 00|SZ|DRG|DMD|SMD|SRG
00001F36                          1572  *
00001F36                          1573  
00001F36  11FC 0000 100C          1574  BRMOVE  MOVE.B  #$00,(IOOPCD)   Set OP-code name
00001F3C                          1575  
00001F3C  243C 00003000           1576          MOVE.L  #$3000,D2       Extract size at 0011000000000000
00001F42  6100 F654               1577          BSR     EXTMSK          Get the size to D1
00001F46  1001                    1578          MOVE.B  D1,D0           Move size to D0
00001F48  6100 FE16               1579          BSR     SSIZE           Translate size
00001F4C  6600 F9DE               1580          BNE     BRBAD           If size was not found, branch to BAD
00001F50                          1581  
00001F50  2078 1000               1582          MOVE.L  GBUFF,A0        Point A0 to GBUFF
00001F54                          1583  
00001F54  6100 FE8C               1584          BSR     EXDST           Extract destination mode & register
00001F58  6100 FDBA               1585          BSR     ADVBFR          Advance the buffer accordingly
00001F5C                          1586  
00001F5C  6100 FEB2               1587          BSR     EXSRC           Extract source mode & register
00001F60  6100 FDB2               1588          BSR     ADVBFR          Advance the buffer accordingly
00001F64                          1589  
00001F64  0C38 0001 10BF          1590          CMP.B   #1,(DMD)        Test if the dest mode == 001
00001F6A  6700 000A               1591          BEQ     BRMOVEA         If the dest mode is equal, branch to BRMOVEA
00001F6E                          1592  
00001F6E  54B8 1000               1593          ADD.L   #$2,(GBUFF)     Advance buffer
00001F72  6000 F9C8               1594          BRA     PRINT           Go to next instruction
00001F76                          1595  
00001F76  11FC 0005 100C          1596  BRMOVEA MOVE.B  #$05,(IOOPCD)   Set Op-code name
00001F7C  54B8 1000               1597          ADD.L   #$2,(GBUFF)     Advance buffer
00001F80  6000 F9BA               1598          BRA     PRINT           Go to next instruction
00001F84                          1599  
00001F84  50B8 1000               1600  BRMOVEM ADD.L   #$8,(GBUFF)
00001F88  11FC 000B 100C          1601          MOVE.B  #$0B,(IOOPCD)       Set OP-code name
00001F8E  6000 F9AC               1602          BRA     PRINT
00001F92                          1603  
00001F92  11FC 008B 100C          1604  BRMOVEQ MOVE.B  #$8B,(IOOPCD)       Set OP-code name
00001F98  6000 F992               1605          BRA     BRBAD               Not supported
00001F9C                          1606  
00001F9C  11FC 0050 100C          1607  BRASL   MOVE.B  #$50,(IOOPCD)       Set OP-code name
00001FA2  6000 F998               1608          BRA     PRINT
00001FA6                          1609  
00001FA6  11FC 0095 100C          1610  BRASR   MOVE.B  #$95,(IOOPCD)       Set OP-code name
00001FAC  6000 F97E               1611          BRA     BRBAD               Not supported
00001FB0                          1612  
00001FB0  11FC 0091 100C          1613  BRLSL   MOVE.B  #$91,(IOOPCD)       Set OP-code name
00001FB6  6000 F974               1614          BRA     BRBAD
00001FBA                          1615  
00001FBA  11FC 0054 100C          1616  BRLSR   MOVE.B  #$54,(IOOPCD)       Set OP-code name
00001FC0  6000 F97A               1617          BRA     PRINT 
00001FC4                          1618  
00001FC4  11FC 002D 100C          1619  BRMULU  MOVE.B  #$2D,(IOOPCD)       Set OP-code name
00001FCA  6000 F970               1620          BRA     PRINT
00001FCE                          1621  
00001FCE  11FC 0032 100C          1622  BRDIVS  MOVE.B  #$32,(IOOPCD)       Set OP-code name     
00001FD4  6000 F966               1623          BRA     PRINT
00001FD8                          1624  
00001FD8  11FC 0043 100C          1625  BREOR   MOVE.B  #$43,(IOOPCD)       Set OP-code name
00001FDE  6000 F95C               1626          BRA     PRINT               Get next instruction
00001FE2                          1627  
00001FE2  11FC 003F 100C          1628  BRORI   MOVE.B  #$3F,(IOOPCD)       Set OP-code name
00001FE8  6000 F952               1629          BRA     PRINT
00001FEC                          1630  
00001FEC  11FC 0047 100C          1631  BREORI  MOVE.B  #$47,(IOOPCD)       Set OP-code name
00001FF2  6000 F948               1632          BRA     PRINT
00001FF6                          1633  
00001FF6  11FC 004C 100C          1634  BRNOT   MOVE.B  #$4C,(IOOPCD)       Set OP-code name
00001FFC  6000 F93E               1635          BRA     PRINT
00002000                          1636  
00002000  11FC 001F 100C          1637  BRSUB   MOVE.B  #$1F,(IOOPCD)       Set OP-code name
00002006  6000 F934               1638          BRA     PRINT        
0000200A                          1639  
0000200A  11FC 0023 100C          1640  BRSUBA  MOVE.B  #$23,(IOOPCD)       Set OP-code name   
00002010  6000 F92A               1641          BRA     PRINT
00002014                          1642  
00002014  11FC 0028 100C          1643  BRSUBI  MOVE.B  #$28,(IOOPCD)       Set OP-code name
0000201A  6000 F920               1644          BRA     PRINT
0000201E                          1645  
0000201E                          1646          END     START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A2H                 1466
A2H11               149E
A2H12               14A4
A2H13               14AA
A2H14               14B0
A2H15               14B6
A2H16               14BC
A2HADV              1496
ADVBFR              1D14
ADVRET              1D56
ASCII2HEX           1434
BRADD               1E36
BRADDA              1E7A
BRADDI              1E92
BRADDQ              1E88
BRAND               1E9C
BRASL               1F9C
BRASR               1FA6
BRBAD               192C
BRBCC               1EB0
BRBEQ               1ED2
BRBHI               1EF0
BRBLT               1EDC
BRBNE               1EE6
BRBTST              1EA6
BRCMP               1EFA
BRCMPA              1F04
BRCMPI              1F0E
BRDIVS              1FCE
BREOR               1FD8
BREORI              1FEC
BRJSR               1F2C
BRLEA               1F22
BRLSL               1FB0
BRLSR               1FBA
BRMOVE              1F36
BRMOVEA             1F76
BRMOVEM             1F84
BRMOVEQ             1F92
BRMULU              1FC4
BRNOT               1FF6
BRORI               1FE2
BRRTS               1F18
BRSUB               2000
BRSUBA              200A
BRSUBI              2014
CBITS               0
CMPMSK              156A
CR                  D
DISP0               1790
DISP1               17A0
DISP2               17B0
DISP3               17D0
DISP4               17F6
DISP5               181C
DISP6               1838
DISP7               1860
DISP8               187C
DISP9               1898
DISPA               18B4
DISPB               18D6
DISPC               1904
DISPD               1926
DISPOP              1760
DMD                 10BF
DONE                1AC8
DRG                 10C0
DSPAX               15B0
DSPHADV             1610
DSPHDR              1AAC
DSPHST              15FC
DSPHXA              15BA
DSPHXL              161A
DSPHXLP             15BE
DSPHXN              15E0
DSPHXRT             15DA
DSPHXW              15F4
DSPOFLP             1746
DSPOFRT             175A
DSPOFS              173C
DSPSTLP             170C
DSPSTR              1702
DSPSTRT             1728
ELOC                1008
ERR0                13C7
ERR1                13EA
EXDST               1DE2
EXSRC               1E10
EXTADV              15AA
EXTLP               159E
EXTMSK              1598
FILE                140B
FLAGCL              142E
FLAGST              1428
GBUFF               1000
H2A                 14F4
H2AA                152C
H2AADV              1524
H2AB                1532
H2AC                1538
H2AD                153E
H2AE                1544
H2AF                154A
HEADR               13A5
HEX2ASCII           14C2
ILL0                1624
ILL1                1632
ILL2                168C
ILL3                169A
IOADDR              1010
IOBDCD              100D
IOLC                1014
IOOPCD              100C
IOOPSZ              10B3
IOSIZE              100E
LF                  A
MASK                1550
MNADDR              7000
MODTBL              1770
MSSG0               10C3
MSSG1               128D
MSSG2               12F6
MSSG4               135B
MSSG5               137C
MXADDR              FFFFFF
NODST               1A2A
NOSRC               19F8
OP                  1AE0
OPNAME              1015
OPSIZE              1D9A
PAUSE               1A88
PRINT               193C
PRMPT1              163C
PRMPT2              16A4
PRMPTDN             16F8
REGTBL              1868
SLOC                1004
SMD                 10C1
SRG                 10C2
SSIZE               1D60
START               1414
SWAPDR              1AD8
TB                  9
TSTMSK              1556
VHEX1               FA
VHEX2               DADA
VHEX3               ADADDADA
VHEX4               45
