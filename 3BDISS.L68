0000140C Starting Address
Assembler used: EASy68K Editor/Assembler v5.13.01
Created On: 11/30/2013 6:22:07 AM

00000000                             1          INCLUDE 'test.x68'
00007000                             2      ORG    $7000
00007000  =000000FA                  3  VHEX1   EQU $FA
00007000  =0000DADA                  4  VHEX2   EQU $DADA
00007000  =ADADDADA                  5  VHEX3   EQU $ADADDADA
00007000  =00000045                  6  VHEX4   EQU $45
00007000  =00000000                  7  CBITS   EQU $00000000
00007000  D200                       8      ADD.B   D0,D1
00007002  203C ADADDADA              9      MOVE.L  #VHEX3, D0
00007008  1200                      10      MOVE.B  D0, D1
0000700A  3200                      11      MOVE.W  D0, D1
0000700C  2200                      12      MOVE.L  D0, D1
0000700E  7000                      13      MOVE.L  #CBITS, D0
00007010  7200                      14      MOVE.L  #CBITS, D1      
00007012                            15  
00007012  21FC ADADDADA 7000        16      MOVE.L  #VHEX3, $7000
0000701A  247C 00007000             17      MOVEA.L #$7000, A2
00007020  300A                      18      MOVE.W  A2, D0
00007022  200A                      19      MOVE.L  A2, D0
00007024  7000                      20      MOVE.L  #CBITS, D0
00007026                            21      
00007026                            22  
00007026  1012                      23      MOVE.B  (A2), D0
00007028  3012                      24      MOVE.W  (A2), D0
0000702A  2012                      25      MOVE.L  (A2), D0
0000702C  7000                      26      MOVE.L  #CBITS, D0
0000702E  247C 00000000             27      MOVEA.L #CBITS, A2
00007034                            28  
00007034                            29  
00007034  101A                      30      MOVE.B  (A2)+, D0
00007036  247C 00000000             31      MOVEA.L #CBITS, A2
0000703C  247C 00007000             32      MOVEA.L #$7000, A2
00007042  301A                      33      MOVE.W  (A2)+, D0
00007044  247C 00000000             34      MOVEA.L #CBITS, A2
0000704A  247C 00007000             35      MOVEA.L #$7000, A2
00007050  201A                      36      MOVE.L  (A2)+, D0
00007052  7000                      37      MOVE.L  #CBITS, D0
00007054  247C 00000000             38      MOVEA.L #CBITS, A2    
0000705A                            39      
0000705A                            40  
0000705A  247C 00007004             41      MOVEA.L #$7004, A2
00007060  1022                      42      MOVE.B  -(A2), D0
00007062  247C 00000000             43      MOVEA.L #CBITS, A2
00007068  247C 00007004             44      MOVEA.L #$7004, A2
0000706E  3022                      45      MOVE.W  -(A2), D0
00007070  247C 00000000             46      MOVEA.L #CBITS, A2
00007076  247C 00007004             47      MOVEA.L #$7004, A2
0000707C  2022                      48      MOVE.L  -(A2), D0
0000707E  7000                      49      MOVE.L  #CBITS, D0
00007080  247C 00000000             50      MOVEA.L #CBITS, A2  
00007086                            51      
00007086                            52  
00007086  1038 7000                 53      MOVE.B  $7000, D0
0000708A  3038 7000                 54      MOVE.W  $7000, D0
0000708E  2038 7000                 55      MOVE.L  $7000, D0 
00007092  7000                      56      MOVE.L  #CBITS, D0  
00007094                            57  
00007094                            58  
00007094                            59  
00007094  103C 00FA                 60      MOVE.B  #VHEX1, D0
00007098  303C DADA                 61      MOVE.W  #VHEX2, D0
0000709C  203C ADADDADA             62      MOVE.L  #VHEX3, D0
000070A2  7000                      63      MOVE.L  #CBITS, D0   
000070A4                            64      
000070A4  2038 7000                 65      MOVE.L  $7000, D0 
000070A8  267C 00007004             66      MOVEA.L #$7004, A3
000070AE  1680                      67      MOVE.B  D0, (A3)
000070B0  3680                      68      MOVE.W  D0, (A3)
000070B2  2680                      69      MOVE.L  D0, (A3)
000070B4  7000                      70      MOVE.L  #CBITS, D0  
000070B6  26BC 00000000             71      MOVE.L  #CBITS, (A3)
000070BC                            72  
000070BC  2478 7000                 73      MOVEA.L $7000, A2 
000070C0  368A                      74      MOVE.W  A2, (A3)
000070C2  268A                      75      MOVE.L  A2, (A3)  
000070C4  26BC 00000000             76      MOVE.L  #CBITS, (A3)
000070CA                            77  
000070CA  247C 00000000             78      MOVEA.L #CBITS,A2
000070D0  247C 00007000             79      MOVEA.L #$7000, A2
000070D6  3692                      80      MOVE.W  (A2), (A3)
000070D8  2692                      81      MOVE.L  (A2), (A3)  
000070DA  26BC 00000000             82      MOVE.L  #CBITS, (A3)
000070E0                            83  
000070E0  247C 00000000             84      MOVEA.L #CBITS,A2
000070E6  247C 00007000             85      MOVEA.L #$7000, A2
000070EC  169A                      86      MOVE.B  (A2)+, (A3)
000070EE  247C 00000000             87      MOVEA.L #CBITS,A2
000070F4  247C 00007000             88      MOVEA.L #$7000, A2
000070FA  369A                      89      MOVE.W  (A2)+, (A3)
000070FC  247C 00000000             90      MOVEA.L #CBITS,A2
00007102  247C 00007000             91      MOVEA.L #$7000, A2
00007108  269A                      92      MOVE.L  (A2)+, (A3)
0000710A  247C 00000000             93      MOVEA.L #CBITS,A2
00007110  247C 00007003             94      MOVEA.L #$7003, A2  
00007116  26BC 00000000             95      MOVE.L  #CBITS, (A3)
0000711C  16A2                      96      MOVE.B  -(A2), (A3)
0000711E  36A2                      97      MOVE.W  -(A2), (A3)
00007120  247C 00000000             98      MOVEA.L #CBITS,A2
00007126  247C 00000000             99      MOVEA.L #CBITS, A2
0000712C  26BC 00000000            100      MOVE.L  #CBITS, (A3)    
00007132                           101  
00007132  16B8 7000                102      MOVE.B  $7000, (A3)
00007136  36B8 7000                103      MOVE.W  $7000, (A3)
0000713A  26B8 7000                104      MOVE.L  $7000, (A3)
0000713E  26BC 00000000            105      MOVE.L  #CBITS, (A3)  
00007144                           106  
00007144  267C 00007000            107      MOVEA.L #$7000, A3
0000714A                           108  
0000714A  16BC 00FA                109      MOVE.B  #VHEX1, (A3)
0000714E  36BC DADA                110      MOVE.W  #VHEX2, (A3)
00007152  26BC ADADDADA            111      MOVE.L  #VHEX3, (A3)
00007158  26BC 00000000            112      MOVE.L  #CBITS, (A3)
0000715E                           113  
0000715E                           114  
0000715E  203C ADADDADA            115      MOVE.L  #VHEX3, D0
00007164  247C 00007004            116      MOVEA.L #$7004, A2
0000716A  14C0                     117      MOVE.B  D0,(A2)+
0000716C  247C 00000000            118      MOVEA.L #CBITS, A2
00007172  247C 00007004            119      MOVEA.L #$7004, A2
00007178  34C0                     120      MOVE.W  D0,(A2)+
0000717A  247C 00000000            121      MOVEA.L #CBITS, A2
00007180  247C 00007004            122      MOVEA.L #$7004, A2
00007186  24C0                     123      MOVE.L  D0,(A2)+
00007188  7000                     124      MOVE.L  #CBITS, D0
0000718A  247C 00000000            125      MOVEA.L #CBITS, A2    
00007190                           126  
00007190                           127  
00007190  21FC 00000000 7000       128      MOVE.L  #CBITS, $7000
00007198  267C 00007000            129      MOVEA.L  #$7000, A3
0000719E  247C 00007004            130      MOVEA.L #$7004, A2
000071A4  14D3                     131      MOVE.B  (A3),(A2)+
000071A6  247C 00000000            132      MOVEA.L #CBITS, A2
000071AC  247C 00007004            133      MOVEA.L #$7004, A2
000071B2  34D3                     134      MOVE.W  (A3),(A2)+
000071B4  247C 00000000            135      MOVEA.L #CBITS, A2
000071BA  247C 00007004            136      MOVEA.L #$7004, A2
000071C0  24D3                     137      MOVE.L  (A3),(A2)+
000071C2  7000                     138      MOVE.L  #CBITS, D0
000071C4  247C 00000000            139      MOVEA.L #CBITS, A2 
000071CA                           140  
000071CA                           141  
000071CA                           142      
000071CA  267C 00007008            143      MOVEA.L #$7008, A3
000071D0  247C 00006000            144      MOVEA.L #$6000, A2
000071D6  34E3                     145      MOVE.W  -(A3),(A2)+
000071D8  247C 00000000            146      MOVEA.L #CBITS, A2
000071DE  267C 00000000            147      MOVEA.L #CBITS, A3
000071E4  267C 00007008            148      MOVEA.L #$7008, A3
000071EA  247C 00006000            149      MOVEA.L #$6000, A2
000071F0  24E3                     150      MOVE.L  -(A3),(A2)+
000071F2  267C 00000000            151      MOVEA.L #CBITS, A3
000071F8  247C 00000000            152      MOVEA.L #CBITS, A2
000071FE                           153  
000071FE                           154  
000071FE                           155      
000071FE  247C 00007000            156      MOVEA.L #$7000, A2
00007204  21FC ADADDADA 7000       157      MOVE.L  #VHEX3, $7000
0000720C  34F8 6000                158      MOVE.W  $6000,(A2)+
00007210  247C 00007000            159      MOVEA.L #$7000, A2
00007216  24F8 6000                160      MOVE.L  $6000,(A2)+
0000721A  247C 00000000            161      MOVEA.L #CBITS, A2
00007220                           162  
00007220                           163  
00007220                           164  
00007220                           165  
00007220  247C 00007004            166      MOVEA.L #$7004, A2
00007226  24FC ADADDADA            167      MOVE.L  #VHEX3,(A2)+
0000722C  7000                     168      MOVE.L  #CBITS, D0
0000722E  247C 00000000            169      MOVEA.L #CBITS, A2    
00007234                           170      
00007234                           171  
00007234  203C ADADDADA            172      MOVE.L  #VHEX3, D0
0000723A  247C 00007004            173      MOVEA.L #$7004, A2
00007240  1500                     174      MOVE.B  D0,-(A2)
00007242  247C 00000000            175      MOVEA.L #CBITS, A2
00007248  247C 00007004            176      MOVEA.L #$7004, A2
0000724E  3500                     177      MOVE.W  D0,-(A2)
00007250  247C 00000000            178      MOVEA.L #CBITS, A2
00007256  247C 00007004            179      MOVEA.L #$7004, A2
0000725C  2500                     180      MOVE.L  D0,-(A2)
0000725E  7000                     181      MOVE.L  #CBITS, D0
00007260  247C 00000000            182      MOVEA.L #CBITS, A2    
00007266                           183  
00007266                           184  
00007266  21FC 00000000 7000       185      MOVE.L  #CBITS, $7000
0000726E  267C 00007000            186      MOVEA.L  #$7000, A3
00007274  247C 00007004            187      MOVEA.L #$7004, A2
0000727A  1513                     188      MOVE.B  (A3),-(A2)
0000727C  247C 00000000            189      MOVEA.L #CBITS, A2
00007282  247C 00007004            190      MOVEA.L #$7004, A2
00007288  3513                     191      MOVE.W  (A3),-(A2)
0000728A  247C 00000000            192      MOVEA.L #CBITS, A2
00007290  247C 00007004            193      MOVEA.L #$7004, A2
00007296  2513                     194      MOVE.L  (A3),-(A2)
00007298  7000                     195      MOVE.L  #CBITS, D0
0000729A  247C 00000000            196      MOVEA.L #CBITS, A2 
000072A0                           197  
000072A0                           198  
000072A0                           199      
000072A0  267C 00007008            200      MOVEA.L #$7008, A3
000072A6  247C 00006008            201      MOVEA.L #$6008, A2
000072AC  3523                     202      MOVE.W  -(A3),-(A2)
000072AE  247C 00000000            203      MOVEA.L #CBITS, A2
000072B4  267C 00000000            204      MOVEA.L #CBITS, A3
000072BA  267C 00007008            205      MOVEA.L #$7008, A3
000072C0  247C 00006000            206      MOVEA.L #$6000, A2
000072C6  2523                     207      MOVE.L  -(A3),-(A2)
000072C8  267C 00000000            208      MOVEA.L #CBITS, A3
000072CE  247C 00000000            209      MOVEA.L #CBITS, A2
000072D4                           210  
000072D4                           211  
000072D4                           212      
000072D4  247C 00007004            213      MOVEA.L #$7004, A2
000072DA  21FC ADADDADA 7004       214      MOVE.L  #VHEX3, $7004
000072E2  3538 6000                215      MOVE.W  $6000,-(A2)
000072E6  247C 00007000            216      MOVEA.L #$7000, A2
000072EC  2538 6000                217      MOVE.L  $6000,-(A2)
000072F0  247C 00000000            218      MOVEA.L #CBITS, A2
000072F6                           219  
000072F6                           220  
000072F6                           221  
000072F6                           222  
000072F6  247C 00007004            223      MOVEA.L #$7004, A2
000072FC  253C ADADDADA            224      MOVE.L  #VHEX3,-(A2)
00007302  7000                     225      MOVE.L  #CBITS, D0
00007304  247C 00000000            226      MOVEA.L #CBITS, A2    
0000730A                           227  
0000730A                           228  
0000730A  203C ADADDADA            229      MOVE.L  #VHEX3, D0
00007310  11C0 7008                230      MOVE.B  D0, $7008
00007314  31C0 7008                231      MOVE.W  D0, $7008
00007318  21C0 7008                232      MOVE.L  D0, $7008
0000731C  21FC 00000000 7008       233      MOVE.L  #CBITS, $7008      
00007324                           234  
00007324  2440                     235      MOVE.L  D0, A2
00007326  31CA 7008                236      MOVE.W  A2, $7008  
0000732A  21CA 7008                237      MOVE.L  A2, $7008  
0000732E  21FC 00000000 7008       238      MOVE.L  #CBITS, $7008  
00007336                           239      
00007336                           240  
00007336  11D2 7008                241      MOVE.B  (A2),$7008  
0000733A  31D2 7008                242      MOVE.W  (A2),$7008  
0000733E  21D2 7008                243      MOVE.L  (A2),$7008    
00007342                           244  
00007342                           245  
00007342  247C 00007008            246      MOVEA.L #$7008, A2
00007348  31DA 6000                247      MOVE.W  (A2)+, $6000 
0000734C  247C 00000000            248      MOVEA.L #CBITS, A2
00007352  247C 00007008            249      MOVEA.L #$7008, A2
00007358  21DA 6000                250      MOVE.L  (A2)+, $6000
0000735C  247C 00000000            251      MOVE.L  #CBITS, A2
00007362  21FC 00000000 6000       252      MOVE.L  #CBITS, $6000 
0000736A                           253      
0000736A                           254  
0000736A  247C 00007008            255      MOVEA.L #$7008, A2
00007370  11E2 6000                256      MOVE.B  -(A2), $6000
00007374  247C 00000000            257      MOVEA.L #CBITS, A2
0000737A  247C 00007008            258      MOVEA.L #$7008, A2
00007380  31E2 6000                259      MOVE.W  -(A2), $6000
00007384  247C 00000000            260      MOVEA.L #CBITS, A2
0000738A  247C 00007008            261      MOVEA.L #$7008, A2
00007390  21E2 6000                262      MOVE.L  -(A2), $6000
00007394  21FC 00000000 6000       263      MOVE.L  #CBITS, $6000
0000739C  247C 00000000            264      MOVEA.L #CBITS, A2  
000073A2                           265      
000073A2                           266  
000073A2  11F8 7008 7000           267      MOVE.B  $7008, $7000
000073A8  31F8 7008 7000           268      MOVE.W  $7008, $7000
000073AE  21F8 7008 7000           269      MOVE.L  $7008, $7000
000073B4  21FC 00000000 7000       270      MOVE.L  #CBITS, $7000
000073BC                           271  
000073BC                           272  
000073BC                           273  
000073BC  11FC 00FA 7000           274      MOVE.B  #VHEX1, $7000
000073C2  31FC DADA 7000           275      MOVE.W  #VHEX2, $7000
000073C8  21FC ADADDADA 7000       276      MOVE.L  #VHEX3, $7000
000073D0  21FC 00000000 7000       277      MOVE.L  #CBITS, $7000   
000073D8                           278  
000073D8                           279  
000073D8                           280  
000073D8                           281  
000073D8                           282  
000073D8                           283  -------------------- end include --------------------
000073D8                           284  *----------------------------------------------------------------------------
000073D8                           285  * Title      : 3B Disassembler
000073D8                           286  * Written by : The Three Bears: Joseph Schooley, Nguyen Tong, Terence Calhoun
000073D8                           287  * Date       : 11/30/2013
000073D8                           288  * Description: A Motorola MC68000 Microprocessor Disassembler 
000073D8                           289  *----------------------------------------------------------------------------
00001000                           290          ORG     $1000
00001000  =0000000D                291  CR      EQU     $0D         ASCII: carriage return
00001000  =0000000A                292  LF      EQU     $0A         ASCII: line feed
00001000  =00000009                293  TB      EQU     $09         ASCII: horizontal tab
00001000  =00007000                294  MNADDR  EQU     $7000       Min address
00001000  =00FFFFFF                295  MXADDR  EQU     $00FFFFFF   Max address
00001000                           296  
00001000                           297  GBUFF   DS.L    1           Pointer to next location in "Good buffer"
00001004                           298  SLOC    DS.B    4           Starting location storage
00001008                           299  ELOC    DS.B    4           Ending location storage
0000100C                           300  
0000100C                           301  *-----I/O Memory-----
0000100C                           302  IOOPCD  DS.B    1           IO offset value for OPNAME, or FF if none
0000100D                           303  IOBDCD  DS.B    1           IO offset value for BAD OPNAME, or FF if none
0000100E                           304  IOSIZE  DS.B    1           IO size for OP code, or FF if none
00001010                           305  IOADDR  DS.L    1           IO address value for instruction memory location
00001014                           306  IOLC    DS.B    1           IO line counter for screen
00001015                           307  
00001015                           308  
00001015                           309  * OP code name memory
00001015                           310  * Example to display MULU:
00001015                           311  *       LEA     OPNAME,A1
00001015                           312  *       ADD.L   #$2D,A1
00001015                           313  *       MOVE.B  #14,D0
00001015                           314  *       TRAP    #15
00001015                           315  *                NAME           DEC     HEX
00001015= 4D 4F 56 45 00           316  OPNAME  DC.B    'MOVE',0        00      00
0000101A= 4D 4F 56 45 41 00        317          DC.B    'MOVEA',0       05      05
00001020= 4D 4F 56 45 4D 00        318          DC.B    'MOVEM',0       11      0B
00001026= 41 44 44 00              319          DC.B    'ADD',0         17      11
0000102A= 41 44 44 41 00           320          DC.B    'ADDA',0        21      15
0000102F= 41 44 44 51 00           321          DC.B    'ADDQ',0        26      1A
00001034= 53 55 42 00              322          DC.B    'SUB',0         31      1F
00001038= 53 55 42 41 00           323          DC.B    'SUBA',0        35      23
0000103D= 53 55 42 49 00           324          DC.B    'SUBI',0        40      28
00001042= 4D 55 4C 55 00           325          DC.B    'MULU',0        45      2D
00001047= 44 49 56 53 00           326          DC.B    'DIVS',0        50      32
0000104C= 4C 45 41 00              327          DC.B    'LEA',0         55      37
00001050= 41 4E 44 00              328          DC.B    'AND',0         59      3B
00001054= 4F 52 49 00              329          DC.B    'ORI',0         63      3F
00001058= 45 4F 52 00              330          DC.B    'EOR',0         67      43
0000105C= 45 4F 52 49 00           331          DC.B    'EORI',0        71      47
00001061= 4E 4F 54 00              332          DC.B    'NOT',0         76      4C
00001065= 41 53 4C 00              333          DC.B    'ASL',0         80      50
00001069= 4C 53 52 00              334          DC.B    'LSR',0         84      54
0000106D= 42 54 53 54 00           335          DC.B    'BTST',0        88      58
00001072= 43 4D 50 00              336          DC.B    'CMP',0         93      5D
00001076= 43 4D 50 41 00           337          DC.B    'CMPA',0        97      61
0000107B= 43 4D 50 49 00           338          DC.B    'CMPI',0        102     66
00001080= 42 43 43 00              339          DC.B    'BCC',0         107     6B
00001084= 42 45 51 00              340          DC.B    'BEQ',0         111     6F
00001088= 42 4C 54 00              341          DC.B    'BLT',0         115     73
0000108C= 42 4E 45 00              342          DC.B    'BNE',0         119     77
00001090= 42 48 49 00              343          DC.B    'BHI',0         123     7B
00001094= 4A 53 52 00              344          DC.B    'JSR',0         127     7F
00001098= 52 54 53 00              345          DC.B    'RTS',0         131     83
0000109C= 42 41 44 00              346          DC.B    'BAD',0         135     87
000010A0= 4D 4F 56 45 51 00        347          DC.B    'MOVEQ',0       139     8B
000010A6= 4C 53 4C 00              348          DC.B    'LSL',0         145     91
000010AA= 41 53 52 00              349          DC.B    'ASR',0         149     95
000010AE= 41 44 44 49 00           350          DC.B    'ADDI',0        153     99
000010B3                           351  
000010B3= 2E 42 00                 352  IOOPSZ  DC.B    '.B',0          0       00
000010B6= 2E 57 00                 353          DC.B    '.W',0          3       03
000010B9= 2E 4C 00                 354          DC.B    '.L',0          6,      06
000010BC= 20 20 00                 355          DC.B    '  ',0          9,      09
000010BF                           356  
000010BF                           357  *-----EA Memory------
000010BF                           358  DMD     DS.B    1               Destination mode
000010C0                           359  DRG     DS.B    1               Destination register
000010C1                           360  SMD     DS.B    1               Source mode
000010C2                           361  SRG     DS.B    1               Source register
000010C3                           362  
000010C3                           363  *--------------------
000010C3                           364  
000010C3= 20 20 5F 20 20 20 ...    365  MSSG0   DC.B    '  _     _     _     _     _     _ ',CR,LF
000010E7= 20 28 6F 5C 2D 2D ...    366          DC.B    ' (o\---/o)   (o\---/o)   (o\---/o)',CR,LF
0000110B= 20 20 7C 20 2D 20 ...    367          DC.B    '  | - - |     | ^ ^ |     | . . |',CR,LF
0000112E= 20 5F 28 20 28 59 ...    368          DC.B    ' _( (Y)_)_,--.(_(Y)_),--._(_(Y) )_',CR,LF
00001152= 2F 20 2F 5F 5F 5F ...    369          DC.B    '/ /___|_  ".."       ".."  _|___\ \',CR,LF
00001177= 5C 5F 5F 5F 5F 5F ...    370          DC.B    '\_______):     THREE     :(_______/',CR,LF
0000119C= 7C 20 7C 20 20 20 ...    371          DC.B    '| |   |        BEARS        |   | |',CR,LF
000011C1= 7C 20 7C 20 20 20 ...    372          DC.B    '| |   |    DISASSEMBLER     |   | |',CR,LF
000011E6= 7C 20 20 5C 5F 5F ...    373          DC.B    '|  \__|__Joey__Terence__Win_|__/  |',CR,LF
0000120B= 20 5C 20 20 20 20 ...    374          DC.B    ' \    I  /_  )   |   (  _\  I    /',CR,LF
0000122F= 20 20 5C 5F 5F 5F ...    375          DC.B    '  \____)___)(___/ \___)(___(____/',CR,LF
00001252= 57 65 6C 63 6F 6D ...    376          DC.B    'Welcome to 3B Disassembler. Enter 0 at any time to quit.',CR,LF,0
0000128D= 45 6E 74 65 72 20 ...    377  MSSG1   DC.B    'Enter the starting location of the code to be disassembled, or leave it blank',CR,LF,'for the starting address:',0
000012F6= 45 6E 74 65 72 20 ...    378  MSSG2   DC.B    'Enter the ending location of the code to be disassembled, or leave it blank',CR,LF,'for the ending address:',0
0000135B= 50 72 65 73 73 20 ...    379  MSSG4   DC.B    'Press any key for the next page.',0
0000137C= 59 6F 75 20 68 61 ...    380  MSSG5   DC.B    'You have reached the end of the program.',0
000013A5= 41 64 64 72 65 73 ...    381  HEADR   DC.B    'Address      OP-Code    Operand',CR,LF,0
000013C7= 54 68 65 20 69 6E ...    382  ERR0    DC.B    'The input address was too small.',CR,LF,0
000013EA= 54 68 65 20 69 6E ...    383  ERR1    DC.B    'The input address was too big.',CR,LF,0
0000140B                           384  
0000140C  11FC 0000 1014           385  START   MOVE.B  #0,IOLC
00001412  43F8 10C3                386          LEA     MSSG0,A1        Welcome message
00001416  103C 000E                387          MOVE.B  #14,D0
0000141A  4E4F                     388          TRAP    #15
0000141C  6000 0216                389          BRA     PRMPT1
00001420                           390  
00001420                           391  *-----------------------------------
00001420                           392  *    Conversion & Comparison Methods
00001420                           393  *-----------------------------------
00001420                           394  
00001420                           395  *
00001420                           396  * Flag set / clear: Sets or clears the flag
00001420                           397  *
00001420                           398   
00001420  44FC 0004                399  FLAGST  MOVE.W  #%100,CCR       Set the z-flag
00001424  4E75                     400          RTS                     Return to caller
00001426  44FC 0000                401  FLAGCL  MOVE.W  #%000,CCR       Clear the z-flg
0000142A  4E75                     402          RTS                     Return to caller
0000142C                           403  
0000142C                           404  *
0000142C                           405  * ASCII2HEX: Convert ASCII into HEX.
0000142C                           406  * Input ASCII from D0 output HEX to D1
0000142C                           407  *
0000142C                           408  
0000142C                           409  ASCII2HEX
0000142C  2200                     410          MOVE.L  D0,D1           Move the input to D1
0000142E  0441 3030                411          SUB     #$3030,D1       Convert last word
00001432  4841                     412          SWAP    D1              Swap bytes
00001434  0441 3030                413          SUB     #$3030,D1       Convert first word
00001438  4841                     414          SWAP    D1              Restore order
0000143A                           415          
0000143A  2F02                     416          MOVE.L  D2,-(SP)        Push D2 on stack
0000143C  4282                     417          CLR.L   D2              
0000143E  143C 0003                418          MOVE.B  #3,D2           Set rotation count
00001442                           419          
00001442  6100 001A                420          BSR     A2H             Start loop
00001446                           421          
00001446  241F                     422          MOVE.L  (SP)+,D2        Restore D2
00001448                           423                  
00001448                           424                                * XAXBXCXD
00001448  E919                     425          ROL.B   #4,D1           XAXBXCDX
0000144A  E949                     426          LSL.W   #4,D1           XAXBCDX0
0000144C  E159                     427          ROL.W   #8,D1           XAXBX0CD
0000144E  4841                     428          SWAP    D1              X0CDXAXB
00001450  E919                     429          ROL.B   #4,D1           X0CDXABX
00001452  E949                     430          LSL.W   #4,D1           X0CDABX0
00001454  E189                     431          LSL.L   #8,D1           CDABX000
00001456  4241                     432          CLR.W   D1              CDAB0000
00001458  4841                     433          SWAP    D1              0000CDAB
0000145A  E159                     434          ROL.W   #8,D1           0000ABCD
0000145C  4E75                     435          RTS                     Return to caller
0000145E                           436          
0000145E                           437          
0000145E                           438  A2H   * ASCII2HEX helper: Convert bytes that were > 30 to appropriate HEX value
0000145E  B23C 0011                439          CMP.B   #$11,D1         11 = A
00001462  6700 0032                440          BEQ     A2H11
00001466  B23C 0012                441          CMP.B   #$12,D1         12 = B
0000146A  6700 0030                442          BEQ     A2H12
0000146E  B23C 0013                443          CMP.B   #$13,D1         13 = C
00001472  6700 002E                444          BEQ     A2H13
00001476  B23C 0014                445          CMP.B   #$14,D1         14 = D
0000147A  6700 002C                446          BEQ     A2H14
0000147E  B23C 0015                447          CMP.B   #$15,D1         15 = E
00001482  6700 002A                448          BEQ     A2H15
00001486  B23C 0016                449          CMP.B   #$16,D1         16 = F
0000148A  6700 0028                450          BEQ     A2H16
0000148E                           451          
0000148E                           452  A2HADV  * A2H conversion branch helper: Rotate to the next byte, and loop back to A2H until all bytes have been analyzed/converted
0000148E  E199                     453          ROL.L   #8,D1           Rotate 1st byte to the end
00001490  51CA FFCC                454          DBRA    D2,A2H          If count is > 0, decrement and loop back to A2H
00001494  4E75                     455          RTS                     If count == 0, return to sub-routine
00001496                           456  
00001496                           457  * A2H conversion branches
00001496  123C 000A                458  A2H11   MOVE.B  #$A,D1
0000149A  60F2                     459          BRA     A2HADV
0000149C  123C 000B                460  A2H12   MOVE.B  #$B,D1
000014A0  60EC                     461          BRA     A2HADV
000014A2  123C 000C                462  A2H13   MOVE.B  #$C,D1
000014A6  60E6                     463          BRA     A2HADV
000014A8  123C 000D                464  A2H14   MOVE.B  #$D,D1
000014AC  60E0                     465          BRA     A2HADV
000014AE  123C 000E                466  A2H15   MOVE.B  #$E,D1
000014B2  60DA                     467          BRA     A2HADV
000014B4  123C 000F                468  A2H16   MOVE.B  #$F,D1
000014B8  60D4                     469          BRA     A2HADV
000014BA                           470  
000014BA                           471  *
000014BA                           472  * HEX2ASCII: Convert ASCII into HEX.
000014BA                           473  * Input HEX from D0.W output ASCII to D1.L
000014BA                           474  *
000014BA                           475  
000014BA                           476  HEX2ASCII
000014BA  2200                     477          MOVE.L  D0,D1           Move the input to D1
000014BC                           478  
000014BC                           479                                * XXXXABCD
000014BC  4841                     480          SWAP    D1              ABCDXXXX
000014BE  4241                     481          CLR.W   D1              ABCD0000
000014C0  E999                     482          ROL.L   #4,D1           BCD0000A
000014C2  E909                     483          LSL.B   #4,D1           BCD000A0
000014C4  E159                     484          ROL.W   #8,D1           BCD0A000
000014C6  E999                     485          ROL.L   #4,D1           CD0A000B
000014C8  E159                     486          ROL.W   #8,D1           CD0A0B00
000014CA  E999                     487          ROL.L   #4,D1           D0A0B00C
000014CC  E909                     488          LSL.B   #4,D1           D0A0B0C0
000014CE  E999                     489          ROL.L   #4,D1           0A0B0C0D
000014D0                           490  
000014D0  2F02                     491          MOVE.L  D2,-(SP)        Push D2 on stack
000014D2  4282                     492          CLR.L   D2              
000014D4  143C 0003                493          MOVE.B  #3,D2           Set rotation count
000014D8  6100 0012                494          BSR     H2A             Start loop
000014DC  241F                     495          MOVE.L  (SP)+,D2        Restore D2
000014DE                           496  
000014DE  0641 3030                497          ADD     #$3030,D1       Convert last word
000014E2  4841                     498          SWAP    D1              Swap bytes
000014E4  0641 3030                499          ADD     #$3030,D1       Convert first word
000014E8  4841                     500          SWAP    D1              Restore order
000014EA  4E75                     501          RTS                     Return to caller
000014EC                           502          
000014EC                           503          
000014EC                           504  H2A   * ASCII2HEX helper: Convert bytes that were > 30 to appropriate HEX value
000014EC  B23C 000A                505          CMP.B   #$A,D1         A = 11
000014F0  6700 0032                506          BEQ     H2AA
000014F4  B23C 000B                507          CMP.B   #$B,D1         B = 12
000014F8  6700 0030                508          BEQ     H2AB
000014FC  B23C 000C                509          CMP.B   #$C,D1         C = 13
00001500  6700 002E                510          BEQ     H2AC
00001504  B23C 000D                511          CMP.B   #$D,D1         D = 14
00001508  6700 002C                512          BEQ     H2AD
0000150C  B23C 000E                513          CMP.B   #$E,D1         E = 15
00001510  6700 002A                514          BEQ     H2AE
00001514  B23C 000F                515          CMP.B   #$F,D1         F = 16
00001518  6700 0028                516          BEQ     H2AF
0000151C                           517          
0000151C                           518  H2AADV  * H2A conversion branch helper: Rotate to the next byte, and loop back to H2A until all bytes have been analyzed/converted
0000151C  E199                     519          ROL.L   #8,D1           Rotate 1st byte to the end
0000151E  51CA FFCC                520          DBRA    D2,H2A          If count is > 0, decrement and loop back to A2H
00001522  4E75                     521          RTS                     If count == 0, return to sub-routine
00001524                           522  
00001524                           523  * H2A conversion branches
00001524  123C 0011                524  H2AA    MOVE.B  #$11,D1
00001528  60F2                     525          BRA     H2AADV
0000152A  123C 0012                526  H2AB    MOVE.B  #$12,D1
0000152E  60EC                     527          BRA     H2AADV
00001530  123C 0013                528  H2AC    MOVE.B  #$13,D1
00001534  60E6                     529          BRA     H2AADV
00001536  123C 0014                530  H2AD    MOVE.B  #$14,D1
0000153A  60E0                     531          BRA     H2AADV
0000153C  123C 0015                532  H2AE    MOVE.B  #$15,D1
00001540  60DA                     533          BRA     H2AADV
00001542  123C 0016                534  H2AF    MOVE.B  #$16,D1
00001546  60D4                     535          BRA     H2AADV
00001548                           536  
00001548                           537  
00001548                           538  *
00001548                           539  * Mask: Mask an input
00001548                           540  * Input value from D0, input mask from D2, output masked value to D1
00001548                           541  *
00001548                           542  
00001548  2200                     543  MASK    MOVE.L  D0,D1           Move the input to D1
0000154A  C282                     544          AND.L   D2,D1           Perform AND on input with the mask
0000154C  4E75                     545          RTS                     Return to caller
0000154E                           546  
0000154E                           547  *
0000154E                           548  * Test Mask: Test an input to a mask.
0000154E                           549  * Input value from D0, input mask from D2, and modify z-flag
0000154E                           550  *
0000154E                           551  
0000154E  2F01                     552  TSTMSK  MOVE.L  D1,-(SP)        Push D1 on stack
00001550  61F6                     553          BSR     MASK            Mask the input
00001552  B481                     554          CMP.L   D1,D2           Test if the input matched the mask
00001554  6606                     555          BNE     *+8             If it didn't match, skip two lines
00001556  221F                     556          MOVE.L  (SP)+,D1        Restore D1
00001558  6000 FEC6                557          BRA     FLAGST          Set flag & return to caller
0000155C  221F                     558          MOVE.L  (SP)+,D1        Restore D1
0000155E  6000 FEC6                559          BRA     FLAGCL          Clear flag & return to caller
00001562                           560  
00001562                           561  *
00001562                           562  * Compare Mask: Strictly test an input to two masks allowing don't cares.
00001562                           563  * Input value from D0, input 1 mask from D2, input 0 mask from D3, and modify z-flag
00001562                           564  *
00001562                           565  
00001562                           566  CMPMSK  
00001562  48E7 F800                567          MOVEM.L D0-D4,-(SP)     Push D1-D4 on stack
00001566  2800                     568          MOVE.L  D0,D4           Copy input to D4
00001568  C082                     569          AND.L   D2,D0           AND 1 mask to input
0000156A  B480                     570          CMP.L   D0,D2           Compare masked input to 1 mask
0000156C  6708                     571          BEQ     *+10            If it matched, skip two lines
0000156E  4CDF 001F                572          MOVEM.L (SP)+,D0-D4     If it didn't match, restore D1-D4
00001572  6000 FEB2                573          BRA     FLAGCL          Clear flag & return to caller
00001576  2004                     574          MOVE.L  D4,D0           Restore input
00001578  4680                     575          NOT.L   D0              !input
0000157A  C083                     576          AND.L   D3,D0           AND 0 mask on input; effectively, NOR 0 mask to the input
0000157C  B680                     577          CMP.L   D0,D3           Compare masked input to 0 mask
0000157E  6608                     578          BNE     *+10            If it didn't match, skip to clear flag
00001580  4CDF 001F                579          MOVEM.L (SP)+,D0-D4     If it matched, restore D1-D4
00001584  6000 FE9A                580          BRA     FLAGST          Set flag & return to caller
00001588  4CDF 001F                581          MOVEM.L (SP)+,D0-D4     Restore D1-D4
0000158C  6000 FE98                582          BRA     FLAGCL          Clear flag & return to caller
00001590                           583          
00001590                           584  
00001590                           585  *
00001590                           586  * Extract Mask: Test an input to a subsequent mask, and return the masked value in LSB format
00001590                           587  * Input value from D0, input mask from D2, output value in D1
00001590                           588  *
00001590                           589  
00001590  2F02                     590  EXTMSK  MOVE.L  D2,-(SP)        Push D2 on stack
00001592  2200                     591          MOVE.L  D0,D1           Move the input to D1
00001594  C282                     592          AND.L   D2,D1           Perform AND on input with the mask
00001596  0802 0000                593  EXTLP   BTST.L  #0,D2           Test the LSB of the mask for 0
0000159A  6700 0006                594          BEQ     EXTADV          If it is 0, rotate the mask until it is 1
0000159E  241F                     595          MOVE.L  (SP)+,D2        Restore the mask
000015A0  4E75                     596          RTS                     Return to caller
000015A2                           597          
000015A2  E28A                     598  EXTADV  LSR.L   #1,D2           Rotate mask right by 1 bit
000015A4  E299                     599          ROR.L   #1,D1           Rotate output in sync with mask
000015A6  60EE                     600          BRA     EXTLP           Return to loop
000015A8                           601  
000015A8                           602  *
000015A8                           603  * Display ASCII: Display the ASCII from D0.L to screen
000015A8                           604  *
000015A8  48E7 E000                605  DSPAX   MOVEM.L D0-D2,-(SP)     Push D0-D2
000015AC  2200                     606          MOVE.L  D0,D1
000015AE  6000 0044                607          BRA     DSPHST          Branch to DISPHX Start
000015B2                           608  
000015B2                           609  *
000015B2                           610  * Display HEX Address: Display the hex from A1 according to the byte length in D2.L
000015B2                           611  *
000015B2                           612  
000015B2  48E7 E040                613  DSPHXA  MOVEM.L D0-D2/A1,-(SP)  Push D0-D2, and A1 to stack
000015B6  51CA 0006                614  DSPHXLP DBRA    D2,*+8          Decrement count; if count is > 0, do not branch to return
000015BA  6000 0016                615          BRA     DSPHXRT         If count is <= 0, branch to return
000015BE  1019                     616          MOVE.B  (A1)+,D0        Get HEX byte in D0, post-increment A1
000015C0  6100 FEF8                617          BSR     HEX2ASCII       Get ASCII in D1
000015C4  E159                     618          ROL.W   #8,D1           Read first byte
000015C6  103C 0006                619          MOVE.B  #6,D0           Display char from D1.B
000015CA  4E4F                     620          TRAP    #15
000015CC  E159                     621          ROL.W   #8,D1           Read second byte
000015CE  4E4F                     622          TRAP    #15
000015D0  60E4                     623          BRA     DSPHXLP         Loop back
000015D2  4CDF 0207                624  DSPHXRT MOVEM.L (SP)+,D0-D2/A1  Else, restore values
000015D6  4E75                     625          RTS                     Return to caller
000015D8                           626          
000015D8                           627  
000015D8                           628  
000015D8                           629  *
000015D8                           630  * Display HEX Nibble: Display the hex from D0.B to screen
000015D8                           631  *
000015D8                           632  
000015D8  48E7 C000                633  DSPHXN  MOVEM.L D0/D1,-(SP)     Push D0 and D1 to stack
000015DC  6100 FEDC                634          BSR     HEX2ASCII       Get ASCII in D1
000015E0  103C 0006                635          MOVE.B  #6,D0           Set trap #6 to read single char from D1.B
000015E4  4E4F                     636          TRAP    #15
000015E6  4CDF 0003                637          MOVEM.L (SP)+,D0/D1     Restore D0 and D1
000015EA  4E75                     638          RTS                     Return to caller
000015EC                           639  
000015EC                           640  *
000015EC                           641  * Display HEX Word: Display the hex from D0.W to screen
000015EC                           642  *
000015EC                           643  
000015EC  48E7 E000                644  DSPHXW  MOVEM.L D0-D2,-(SP)     Push D0-D2 to stack
000015F0  6100 FEC8                645          BSR     HEX2ASCII       Get ASCII in D1
000015F4                           646  
000015F4  4282                     647  DSPHST  CLR.L   D2              
000015F6  143C 0003                648          MOVE.B  #3,D2           Set rotation count
000015FA  103C 0006                649          MOVE.B  #6,D0           Set trap #6 to read single char from D1.B
000015FE  6100 0008                650          BSR     DSPHADV         Start loop
00001602                           651  
00001602  4CDF 0007                652          MOVEM.L  (SP)+,D0-D2    Restore D0-D2
00001606  4E75                     653          RTS                     Return to caller
00001608                           654  
00001608  E199                     655  DSPHADV ROL.L   #8,D1           Rotate bytes left
0000160A  4E4F                     656          TRAP    #15             Display char in D1.B
0000160C  51CA FFFA                657          DBRA    D2,DSPHADV      If count is > 0, decrement and loop back to DSPHADV
00001610  4E75                     658          RTS                     If count == 0, return to sub-routine
00001612                           659  
00001612                           660  *
00001612                           661  * Display HEX Long: Display the hex from D0.L to screen
00001612                           662  *
00001612                           663  
00001612  4840                     664  DSPHXL  SWAP    D0              Swap first half to D0.W
00001614  61D6                     665          BSR     DSPHXW          Display first half
00001616  4840                     666          SWAP    D0              Swap lower half to D0.W
00001618  61D2                     667          BSR     DSPHXW          Display lower half
0000161A  4E75                     668          RTS                     Return to caller
0000161C                           669          
0000161C                           670  
0000161C                           671          
0000161C                           672  *--------------------
0000161C                           673  *   I/O
0000161C                           674  *--------------------                   
0000161C  43F8 13C7                675  ILL0    LEA     ERR0,A1         Starting location was too small
00001620  103C 000E                676          MOVE.B  #14,D0
00001624  4E4F                     677          TRAP    #15
00001626  6000 000C                678          BRA     PRMPT1
0000162A                           679          
0000162A  43F8 13EA                680  ILL1    LEA     ERR1,A1         Starting location was too big
0000162E  103C 000E                681          MOVE.B  #14,D0
00001632  4E4F                     682          TRAP    #15
00001634                           683          
00001634  43F8 128D                684  PRMPT1  LEA     MSSG1,A1        Starting location request message
00001638  103C 000E                685          MOVE.B  #14,D0
0000163C  4E4F                     686          TRAP    #15
0000163E                           687          
0000163E  43F8 1004                688          LEA     SLOC,A1         Input will be stored in SLOC
00001642  103C 0002                689          MOVE.B  #2,D0           Input starting location (as string / hex)
00001646  4E4F                     690          TRAP    #15
00001648                           691          
00001648  2038 1004                692          MOVE.L  (SLOC),D0       Move input to D0
0000164C                           693  
0000164C  B0BC 00FFFFFF            694          CMP.L   #$00FFFFFF,D0   Check if input was NULL
00001652  660C                     695          BNE     *+14            If the input was not null, branch to convert input
00001654  21FC 00007000 1004       696          MOVE.L  #MNADDR,(SLOC)  If the input was null, move the min address to SLOC
0000165C  6000 003E                697          BRA     PRMPT2          Branch to the next prompt
00001660                           698          
00001660  6100 FDCA                699          BSR     ASCII2HEX       Convert D0 to HEX in D1
00001664                           700          
00001664  2281                     701          MOVE.L  D1,(A1)         Set SLOC to HEX value
00001666                           702                          
00001666  B2BC 00000000            703          CMP.L   #0,D1           Compare starting location to 0
0000166C  6700 0470                704          BEQ     DONE            End program if 0
00001670                           705          
00001670  B2BC 00007000            706          CMP.L   #MNADDR,D1      Compare starting location to min
00001676  65A4                     707          BLO     ILL0            Branch to ILL0 if < min
00001678                           708          
00001678  B2BC 00FFFFFF            709          CMP.L   #MXADDR,D1      Compare ending location to max
0000167E  64AA                     710          BHS     ILL1            Branch to ILL1 if >= max
00001680                           711                  
00001680  6000 001A                712          BRA     PRMPT2          Branch to the next prompt
00001684                           713  
00001684  43F8 13C7                714  ILL2    LEA     ERR0,A1         Ending location was too small
00001688  103C 000E                715          MOVE.B  #14,D0
0000168C  4E4F                     716          TRAP    #15
0000168E  6000 000C                717          BRA     PRMPT2
00001692                           718          
00001692  43F8 13EA                719  ILL3    LEA     ERR1,A1         Ending location was too big
00001696  103C 000E                720          MOVE.B  #14,D0
0000169A  4E4F                     721          TRAP    #15
0000169C                           722          
0000169C  43F8 12F6                723  PRMPT2  LEA     MSSG2,A1        Ending location request message
000016A0  103C 000E                724          MOVE.B  #14,D0
000016A4  4E4F                     725          TRAP    #15
000016A6                           726          
000016A6  43F8 1008                727          LEA     ELOC,A1         Input will be stored in SLOC
000016AA  103C 0002                728          MOVE.B  #2,D0           Input starting location (as string / hex)
000016AE  4E4F                     729          TRAP    #15
000016B0                           730          
000016B0  2038 1008                731          MOVE.L  (ELOC),D0       Move input to D0
000016B4                           732  
000016B4  B0BC 00FFFFFF            733          CMP.L   #$00FFFFFF,D0   Check if input was NULL
000016BA  660C                     734          BNE     *+14            If the input was not null, branch to convert input
000016BC  21FC 00FFFFFF 1008       735          MOVE.L  #MXADDR,(ELOC)  If the input was null, move the max address to ELOC
000016C4  6000 002A                736          BRA     PRMPTDN         Branch to prompt done
000016C8                           737          
000016C8  6100 FD62                738          BSR     ASCII2HEX       Convert D0 to HEX in D1
000016CC                           739          
000016CC  2281                     740          MOVE.L  D1,(A1)         Set ELOC to HEX value
000016CE                           741  
000016CE  B2BC 00000000            742          CMP.L   #0,D1           Compare ending location to 0
000016D4  6700 0408                743          BEQ     DONE            End program if 0
000016D8                           744          
000016D8  B2BC 00007000            745          CMP.L   #MNADDR,D1      Compare min ending location to min
000016DE  63A4                     746          BLS     ILL2            Branch to ILL2 if <= min
000016E0                           747          
000016E0  B2BC 00FFFFFF            748          CMP.L   #MXADDR,D1      Compare ending location to max
000016E6  62AA                     749          BHI     ILL3            Branch to ILL3 if > max
000016E8                           750          
000016E8  2038 1004                751          MOVE.L  (SLOC),D0       Move starting location data to D0
000016EC  B280                     752          CMP.L   D0,D1           Compare ending location to starting location
000016EE  6394                     753          BLS     ILL2            Branch to ILL3 if <= starting location
000016F0                           754          
000016F0  21F8 1004 1000           755  PRMPTDN MOVE.L  SLOC,GBUFF      Store starting location in GBUFF for OP
000016F6  6000 03CA                756          BRA     DSPHDR          Branch to display method
000016FA                           757  
000016FA                           758  *
000016FA                           759  * Display string: Displays string until NULL char
000016FA                           760  * Input string at A1, output length of string at D1.B
000016FA                           761  * Max length: 255
000016FA                           762  *
000016FA                           763          
000016FA  48E7 E040                764  DSPSTR  MOVEM.L D0-D2/A1,-(SP)  Push D0-D2, and A1 to stack
000016FE  243C 000000FF            765          MOVE.L  #255,D2         Set count to 255
00001704  51CA 0006                766  DSPSTLP DBRA    D2,*+8          Decrement count; if count is > 0, do not branch to return
00001708  6000 0016                767          BRA     DSPSTRT         If count is <= 0, branch to return
0000170C  1019                     768          MOVE.B  (A1)+,D0        Get HEX byte in D0, post-increment A1
0000170E  B03C 0000                769          CMP.B   #0,D0           Check if byte is NULL char
00001712  6700 000C                770          BEQ     DSPSTRT         If byte is NULL char, branch to return
00001716  6100 FDA2                771          BSR     HEX2ASCII       Else, get ASCII in D1
0000171A  6100 FE8C                772          BSR     DSPAX           Display ASCII
0000171E  60E4                     773          BRA     DSPSTLP         Loop back
00001720  4482                     774  DSPSTRT NEG.L   D2              Negate count
00001722  0682 000000FE            775          ADD.L   #254,D2         Add 254; effectively 255 - count - null byte
00001728  4CDF 0003                776          MOVEM.L (SP)+,D0/D1     Restore D0 and D1
0000172C  1202                     777          MOVE.B  D2,D1           Move length to D1
0000172E  4CDF 0204                778          MOVEM.L (SP)+,D2/A1     Restore D2 and A1
00001732  4E75                     779          RTS                     Return to caller
00001734                           780  
00001734                           781  *
00001734                           782  * Display offset space: Display space according to offset length
00001734                           783  * Input offset length in D2.B
00001734                           784  *
00001734                           785  
00001734  48E7 E000                786  DSPOFS  MOVEM.L D0-D2,-(SP)     Push D0-D2 to stack
00001738                           787          * Ensure count is strictly in one byte
00001738  4280                     788          CLR.L   D0
0000173A  1002                     789          MOVE.B  D2,D0
0000173C  2400                     790          MOVE.L  D0,D2
0000173E  51CA 0006                791  DSPOFLP DBRA    D2,*+8          Decrement count; if count is > 0, do not branch to return
00001742  6000 000E                792          BRA     DSPOFRT         If count is <= 0, branch to return
00001746  103C 0006                793          MOVE.B  #6,D0           Display character
0000174A  123C 0020                794          MOVE.B  #' ',D1         Read space
0000174E  4E4F                     795          TRAP    #15
00001750  60EC                     796          BRA     DSPOFLP         Loop back
00001752  4CDF 0007                797  DSPOFRT MOVEM.L (SP)+,D0-D2     Restore D0-D2
00001756  4E75                     798          RTS                     Return to callr
00001758                           799  
00001758                           800  *
00001758                           801  * Display operand: Displays operand according to mode and register
00001758                           802  * Input mode in D2.B, input reg in D3.B
00001758                           803  *
00001758                           804  
00001758  48E7 E000                805  DISPOP  MOVEM.L D0-D2,-(SP)         Push D0-D2 to stack
0000175C  103C 0006                806          MOVE.B  #6,D0               Display character
00001760  C4FC 0004                807          MULU.W  #4,D2
00001764  4EFB 2002                808          JMP     MODTBL(PC,D2.W)     Jump to mode
00001768  6000 001E                809  MODTBL  BRA     DISP0               Dn
0000176C  6000 002A                810          BRA     DISP1               An
00001770  6000 0036                811          BRA     DISP2               (An)
00001774  6000 0052                812          BRA     DISP3               (An)+
00001778  6000 0074                813          BRA     DISP4               -(An)
0000177C  6000 0096                814          BRA     DISP5               (d,An)
00001780  6000 00AE                815          BRA     DISP6               (d,An,Xn)
00001784  6000 00D2                816          BRA     DISP7               (XXX).W/(XXX).L/(d,PC)/(d,PC,Xn)/#data
00001788                           817  * Dn            000 XXX
00001788  123C 0044                818  DISP0   MOVE.B  #'D',D1             Read D
0000178C  4E4F                     819          TRAP    #15
0000178E  2003                     820          MOVE.L  D3,D0               Read reg from D3
00001790  6100 FE46                821          BSR     DSPHXN              Display as hex nibble
00001794  6000 0188                822          BRA     DISPD               Branch to return
00001798                           823  * An            001 XXX
00001798  123C 0041                824  DISP1   MOVE.B  #'A',D1             Read A
0000179C  4E4F                     825          TRAP    #15
0000179E  2003                     826          MOVE.L  D3,D0               Read reg from D3
000017A0  6100 FE36                827          BSR     DSPHXN              Display as hex byte
000017A4  6000 0178                828          BRA     DISPD               Branch to return
000017A8                           829  * (An)          010 XXX
000017A8  123C 0028                830  DISP2   MOVE.B  #'(',D1             Read (
000017AC  4E4F                     831          TRAP    #15
000017AE  123C 0041                832          MOVE.B  #'A',D1             Read A
000017B2  4E4F                     833          TRAP    #15
000017B4  2003                     834          MOVE.L  D3,D0               Read reg from D3
000017B6  6100 FE20                835          BSR     DSPHXN              Display as hex nibble
000017BA  103C 0006                836          MOVE.B  #6,D0               Display character
000017BE  123C 0029                837          MOVE.B  #')',D1             Read )
000017C2  4E4F                     838          TRAP    #15
000017C4  6000 0158                839          BRA     DISPD               Branch to return
000017C8                           840  * (An)+         011 XXX
000017C8  123C 0028                841  DISP3   MOVE.B  #'(',D1             Read (
000017CC  4E4F                     842          TRAP    #15
000017CE  123C 0041                843          MOVE.B  #'A',D1             Read A
000017D2  4E4F                     844          TRAP    #15
000017D4  2003                     845          MOVE.L  D3,D0               Read reg from D3
000017D6  6100 FE00                846          BSR     DSPHXN              Display as hex nibble
000017DA  103C 0006                847          MOVE.B  #6,D0               Display character
000017DE  123C 0029                848          MOVE.B  #')',D1             Read )
000017E2  4E4F                     849          TRAP    #15
000017E4  123C 002B                850          MOVE.B  #'+',D1             Read +
000017E8  4E4F                     851          TRAP    #15
000017EA  6000 0132                852          BRA     DISPD               Branch to return
000017EE                           853  * -(An)         100 XXX
000017EE  123C 002D                854  DISP4   MOVE.B  #'-',D1             Read +
000017F2  4E4F                     855          TRAP    #15
000017F4  123C 0028                856          MOVE.B  #'(',D1             Read (
000017F8  4E4F                     857          TRAP    #15
000017FA  123C 0041                858          MOVE.B  #'A',D1             Read A
000017FE  4E4F                     859          TRAP    #15
00001800  2003                     860          MOVE.L  D3,D0               Read reg from D3
00001802  6100 FDD4                861          BSR     DSPHXN              Display as hex nibble
00001806  103C 0006                862          MOVE.B  #6,D0               Display character
0000180A  123C 0029                863          MOVE.B  #')',D1             Read )
0000180E  4E4F                     864          TRAP    #15
00001810  6000 010C                865          BRA     DISPD               Branch to return
00001814                           866  * (d,An)        101 XXX
00001814  123C 0028                867  DISP5   MOVE.B  #'(',D1             Read (
00001818  4E4F                     868          TRAP    #15
0000181A                           869          *----TODO---*
0000181A                           870          * Display d *
0000181A  123C 002C                871          MOVE.B  #',',D1             Read ,
0000181E  4E4F                     872          TRAP    #15
00001820  123C 0041                873          MOVE.B  #'A',D1             Read A
00001824  4E4F                     874          TRAP    #15
00001826                           875          *----TODO---*
00001826                           876          * Display A *
00001826  123C 0029                877          MOVE.B  #')',D1             Read )
0000182A  4E4F                     878          TRAP    #15
0000182C  6000 00F0                879          BRA     DISPD               Branch to return
00001830                           880  * (d,An,Xn)     110 XXX
00001830  123C 0028                881  DISP6   MOVE.B  #'(',D1             Read (
00001834  4E4F                     882          TRAP    #15
00001836                           883          *----TODO---*
00001836                           884          * Display d *
00001836  123C 002C                885          MOVE.B  #',',D1             Read ,
0000183A  4E4F                     886          TRAP    #15
0000183C  123C 0041                887          MOVE.B  #'A',D1             Read A
00001840  4E4F                     888          TRAP    #15
00001842                           889          *----TODO---*
00001842                           890          * Display A *
00001842  123C 002C                891          MOVE.B  #',',D1             Read ,
00001846  4E4F                     892          TRAP    #15
00001848  123C 0058                893          MOVE.B  #'X',D1             Read X
0000184C  4E4F                     894          TRAP    #15
0000184E                           895          *----TODO---*
0000184E                           896          * Display X *
0000184E  123C 0029                897          MOVE.B  #')',D1             Read )
00001852  4E4F                     898          TRAP    #15
00001854  6000 00C8                899          BRA     DISPD               Branch to return
00001858                           900  * (XXX).W/(XXX).L/(d,PC)/(d,PC,Xn)/#data
00001858  C6FC 0004                901  DISP7   MULU.W  #4,D3
0000185C  4EFB 3002                902          JMP     REGTBL(PC,D3.W)     Jump to reg
00001860  6000 0012                903  REGTBL  BRA     DISP8               (XXX).W
00001864  6000 002A                904          BRA     DISP9               (XXX).L
00001868  6000 0042                905          BRA     DISPA               (d,PC)
0000186C  6000 0060                906          BRA     DISPB               (d,PC,Xn)
00001870  6000 008A                907          BRA     DISPC               #data
00001874                           908  * (XXX.W)       111 000
00001874                           909  DISP8   
00001874  123C 0024                910          MOVE.B  #'$',D1             Read $
00001878  4E4F                     911          TRAP    #15
0000187A  2278 1010                912          MOVEA.L IOADDR,A1           Point A1 to the instruction address
0000187E  4282                     913          CLR.L   D2
00001880  143C 0002                914          MOVE.B  #2,D2               Read word size to D2
00001884  6100 FD2C                915          BSR     DSPHXA              Display address
00001888  D5B8 1010                916          ADD.L   D2,(IOADDR)         Advance IO address by word
0000188C  6000 0090                917          BRA     DISPD               Branch to return
00001890                           918  * (XXX.L)       111 001
00001890  123C 0024                919  DISP9   MOVE.B  #'$',D1             Read $
00001894  4E4F                     920          TRAP    #15
00001896  2278 1010                921          MOVEA.L IOADDR,A1           Point A1 to the instruction address
0000189A  4282                     922          CLR.L   D2
0000189C  143C 0004                923          MOVE.B  #4,D2               Read long size to D2
000018A0  6100 FD10                924          BSR     DSPHXA              Display address
000018A4  D5B8 1010                925          ADD.L   D2,(IOADDR)         Advance IO address by long
000018A8  6000 0074                926          BRA     DISPD               Branch to return
000018AC                           927  * (d,PC)        111 010
000018AC  123C 0028                928  DISPA   MOVE.B  #'(',D1             Read (
000018B0  4E4F                     929          TRAP    #15
000018B2                           930          *----TODO---*
000018B2                           931          * Display d *
000018B2  123C 002C                932          MOVE.B  #',',D1             Read ,
000018B6  4E4F                     933          TRAP    #15
000018B8  123C 0050                934          MOVE.B  #'P',D1             Read P
000018BC  4E4F                     935          TRAP    #15
000018BE  123C 0043                936          MOVE.B  #'C',D1             Read C
000018C2  4E4F                     937          TRAP    #15
000018C4  123C 0029                938          MOVE.B  #')',D1             Read )
000018C8  4E4F                     939          TRAP    #15
000018CA  6000 0052                940          BRA     DISPD
000018CE                           941  * (d,PC,Xn)     111 011
000018CE  123C 0028                942  DISPB   MOVE.B  #'(',D1             Read (
000018D2  4E4F                     943          TRAP    #15
000018D4                           944          *----TODO---*
000018D4                           945          * Display d *
000018D4  123C 002C                946          MOVE.B  #',',D1             Read ,
000018D8  4E4F                     947          TRAP    #15
000018DA  123C 0050                948          MOVE.B  #'P',D1             Read P
000018DE  4E4F                     949          TRAP    #15
000018E0  123C 0043                950          MOVE.B  #'C',D1             Read C
000018E4  4E4F                     951          TRAP    #15
000018E6  123C 002C                952          MOVE.B  #',',D1             Read ,
000018EA  4E4F                     953          TRAP    #15
000018EC  123C 0058                954          MOVE.B  #'X',D1             Read X
000018F0  4E4F                     955          TRAP    #15
000018F2                           956          *----TODO---*
000018F2                           957          * Display X *
000018F2  123C 0029                958          MOVE.B  #')',D1             Read )
000018F6  4E4F                     959          TRAP    #15
000018F8  6000 0024                960          BRA     DISPD               Branch to return
000018FC                           961  * #<data>       111 100
000018FC  123C 0023                962  DISPC   MOVE.B  #'#',D1             Read #
00001900  4E4F                     963          TRAP    #15
00001902  2278 1010                964          MOVEA.L IOADDR,A1           Point A1 to the instruction address
00001906  4282                     965          CLR.L   D2
00001908  1438 100E                966          MOVE.B  (IOSIZE),D2         Read instruction size to D2
0000190C  C4FC 0002                967          MULU.W  #2,D2               Translate size to value
00001910  6100 FCA0                968          BSR     DSPHXA              Display address
00001914  D3C2                     969          ADD.L   D2,A1               Advance A1 by instruction size
00001916  21C9 1010                970          MOVE.L  A1,(IOADDR)         Move A1 to IOADDR
0000191A  6000 0002                971          BRA     DISPD               Branch to return
0000191E  4CDF 0007                972  DISPD   MOVEM.L (SP)+,D0-D2         Restore D0-D2
00001922  4E75                     973          RTS                         Return to caller
00001924                           974          
00001924  11F8 100C 100D           975  BRBAD   MOVE.B  (IOOPCD),(IOBDCD)   Move OPCODE to BAD OPCODE
0000192A  11FC 0087 100C           976          MOVE.B  #$87,(IOOPCD)       Set OPCODE to BAD
00001930                           977          * Clear bad data
00001930  11FC 00FF 10C1           978          MOVE.B  #$FF,(SMD)
00001936  11FC 00FF 10C2           979          MOVE.B  #$FF,(SRG)
0000193C  11FC 00FF 10BF           980          MOVE.B  #$FF,(DMD)
00001942  11FC 00FF 10C0           981          MOVE.B  #$FF,(DRG)
00001948  11FC 00FF 100E           982          MOVE.B  #$FF,(IOSIZE)
0000194E                           983          
0000194E                           984  PRINT   *----TODO----*
0000194E                           985          * If OP code exists as BAD and BAD OPCODE don't exist, assume that the last
0000194E                           986          * OP display was BAD, and display then next word as raw data
0000194E  0C38 00FF 100C           987          CMP.B   #$FF,(IOOPCD)       Test if OP code exists
00001954  67CE                     988          BEQ     BRBAD               If it does not, display BAD
00001956                           989  
00001956  2038 1010                990          MOVE.L  (IOADDR),D0         Read memory location
0000195A  6100 FCB6                991          BSR     DSPHXL              Display as hex long
0000195E  103C 0006                992          MOVE.B  #6,D0               Display character
00001962  123C 0009                993          MOVE.B  #TB,D1              Read tab
00001966  4E4F                     994          TRAP    #15
00001968                           995  
00001968  4280                     996          CLR.L   D0
0000196A  4282                     997          CLR.L   D2
0000196C  43F8 1015                998          LEA     OPNAME,A1           Read OP-code
00001970  1038 100C                999          MOVE.B  (IOOPCD),D0         Get offset
00001974  D3C0                    1000          ADD.L   D0,A1               Add offset
00001976  6100 FD82               1001          BSR     DSPSTR              Display string until NULL char and get length in D1.B
0000197A  1401                    1002          MOVE.B  D1,D2               Store length in D2 to be used as space offset
0000197C                          1003      
0000197C  0C38 00FF 100D          1004          CMP.B   #$FF,(IOBDCD)       Test if BAD OP code exists
00001982  6732                    1005          BEQ     *+52                If it doesn't exist, don't display it
00001984  103C 0006               1006          MOVE.B  #6,D0               Display character
00001988  123C 0020               1007          MOVE.B  #' ',D1             Read space
0000198C  4E4F                    1008          TRAP    #15
0000198E  123C 0028               1009          MOVE.B  #'(',D1             Read (
00001992  4E4F                    1010          TRAP    #15
00001994  43F8 1015               1011          LEA     OPNAME,A1           Read OP-code
00001998  1038 100D               1012          MOVE.B  (IOBDCD),D0         Get offset
0000199C  D3C0                    1013          ADD.L   D0,A1               Add offset
0000199E  6100 FD5A               1014          BSR     DSPSTR              Display string until NULL char and get length in D1.B
000019A2  D401                    1015          ADD.B   D1,D2               Add length to space offset
000019A4  103C 0006               1016          MOVE.B  #6,D0               Display character
000019A8  123C 003F               1017          MOVE.B  #'?',D1
000019AC  4E4F                    1018          TRAP    #15                 Read ?
000019AE  123C 0029               1019          MOVE.B  #')',D1             Read )
000019B2  4E4F                    1020          TRAP    #15
000019B4  5402                    1021          ADD.B   #2,D2               Add 2 to space offset to account for ( and )
000019B6                          1022  
000019B6  43F8 10B3               1023          LEA     IOOPSZ,A1           Read OP code size
000019BA  103C 0003               1024          MOVE.B  #$03,D0             Set size to 3
000019BE  0C38 00FF 100E          1025          CMP.B   #$FF,(IOSIZE)       Test if OP size exists
000019C4  6704                    1026          BEQ     *+6                 If OP size doesn't exist, skip the next line
000019C6  1038 100E               1027          MOVE.B  (IOSIZE),D0         If OP size exists, move it to D0
000019CA  C0FC 0003               1028          MULU.W  #$3,D0              Multiply size by 3 for correct offset
000019CE  D3C0                    1029          ADD.L   D0,A1               Add offset
000019D0  6100 FD28               1030          BSR     DSPSTR              Display string until NULL char and get length in D1.B
000019D4                          1031          
000019D4  D401                    1032          ADD.B   D1,D2               Add length to space offset
000019D6  4442                    1033          NEG.W   D2                  Negate space offset
000019D8  0642 000B               1034          ADD.W   #11,D2              Add 11 to space offset; effectively 11 - space offset
000019DC                          1035  
000019DC  6100 FD56               1036          BSR     DSPOFS              Display space offset with tab
000019E0                          1037  
000019E0  54B8 1010               1038          ADD.L   #2,(IOADDR)         Move memory location past first word
000019E4                          1039  
000019E4  4204                    1040          CLR.B   D4                  Set source to false
000019E6  4242                    1041          CLR.W   D2
000019E8  4243                    1042          CLR.W   D3
000019EA  1438 10C1               1043          MOVE.B  (SMD),D2            Read source mode to D2
000019EE  B43C 00FF               1044          CMP.B   #$FF,D2             Test if it exists
000019F2  6700 0016               1045          BEQ     NOSRC               If it does not exist, do not display source
000019F6  1638 10C2               1046          MOVE.B  (SRG),D3            Read source reg to D3
000019FA  B63C 00FF               1047          CMP.B   #$FF,D3             Test if it exists
000019FE  6700 000A               1048          BEQ     NOSRC               If it does not exist, do not display source
00001A02  6100 FD54               1049          BSR     DISPOP              If both mode & register exist, display accordingly
00001A06  183C 0001               1050          MOVE.B  #1,D4               Set source to true
00001A0A                          1051  
00001A0A  4242                    1052  NOSRC   CLR.W   D2
00001A0C  4243                    1053          CLR.W   D3
00001A0E  1438 10BF               1054          MOVE.B  (DMD),D2            Read dest mode to D2
00001A12  B43C 00FF               1055          CMP.B   #$FF,D2             Test if it exists
00001A16  6700 0024               1056          BEQ     NODST               If it does not exist, do not display dest
00001A1A  1638 10C0               1057          MOVE.B  (DRG),D3            Read dest reg to D3
00001A1E  B63C 00FF               1058          CMP.B   #$FF,D3             Test if it exists
00001A22  6700 0018               1059          BEQ     NODST               If it does not exist, do not display dest
00001A26                          1060  
00001A26  103C 0006               1061          MOVE.B  #6,D0               Display character
00001A2A  123C 002C               1062          MOVE.B  #',',D1             Read comma
00001A2E  B83C 0001               1063          CMP.B   #1,D4               Test if source was displayed
00001A32  6600 0000               1064          BNE     *+2                 If it was not displayed, don't display a comma
00001A36  4E4F                    1065          TRAP    #15                 If it was displayed, display a comma
00001A38                          1066  
00001A38  6100 FD1E               1067          BSR     DISPOP              If both mode & register exist, display accordingly
00001A3C                          1068  
00001A3C  103C 0006               1069  NODST   MOVE.B  #6,D0               Display character
00001A40  123C 0009               1070          MOVE.B  #TB,D1              Read tab
00001A44  4E4F                    1071          TRAP    #15
00001A46                          1072  
00001A46  123C 000D               1073          MOVE.B  #CR,D1
00001A4A  4E4F                    1074          TRAP    #15
00001A4C  123C 000A               1075          MOVE.B  #LF,D1
00001A50  4E4F                    1076          TRAP    #15
00001A52                          1077  
00001A52                          1078          *DISPLAY IO OPERAND
00001A52                          1079          
00001A52  2078 1000               1080          MOVE.L  GBUFF,A0            Set A0 to ELOC location
00001A56  B1F8 1008               1081          CMPA.L  ELOC,A0             Compare next buffer to ending location
00001A5A  6C00 0082               1082          BGE     DONE                Branch to DONE if >= ending location
00001A5E                          1083  
00001A5E  5238 1014               1084          ADD.B   #1,IOLC
00001A62  0C38 001E 1014          1085          CMP.B   #30,IOLC            Compare #30 to line counter
00001A68  6700 0034               1086          BEQ     PAUSE               If ==, branch to PAUSE
00001A6C                          1087  
00001A6C                          1088          * Reset IO instruction values
00001A6C  11FC 00FF 10C1          1089          MOVE.B  #$FF,(SMD)
00001A72  11FC 00FF 10C2          1090          MOVE.B  #$FF,(SRG)
00001A78  11FC 00FF 10BF          1091          MOVE.B  #$FF,(DMD)
00001A7E  11FC 00FF 10C0          1092          MOVE.B  #$FF,(DRG)
00001A84  11FC 00FF 100C          1093          MOVE.B  #$FF,(IOOPCD)
00001A8A  11FC 00FF 100D          1094          MOVE.B  #$FF,(IOBDCD)
00001A90  11FC 00FF 100E          1095          MOVE.B  #$FF,(IOSIZE)
00001A96  54B8 1000               1096          ADD.L   #$2,(GBUFF)     Advance buffer
00001A9A                          1097  
00001A9A  6000 005A               1098          BRA     OP                  Branch to OP for next instruction
00001A9E                          1099  
00001A9E  43F8 135B               1100  PAUSE   LEA     MSSG4,A1            Display keypress prompt
00001AA2  103C 000E               1101          MOVE.B  #14,D0
00001AA6  4E4F                    1102          TRAP    #15
00001AA8  103C 000C               1103          MOVE.B  #12,D0              Hide keyboard input
00001AAC  123C 0000               1104          MOVE.B  #0,D1
00001AB0  4E4F                    1105          TRAP    #15
00001AB2  103C 0005               1106          MOVE.B  #5,D0               Request keyboard input
00001AB6  4E4F                    1107          TRAP    #15
00001AB8                          1108  *----TODO----*
00001AB8                          1109  * Test if keycode was for ENTER
00001AB8  103C 000C               1110          MOVE.B  #12,D0              Show keyboard input
00001ABC  123C 0001               1111          MOVE.B  #1,D1
00001AC0  4E4F                    1112          TRAP    #15
00001AC2  103C 000B               1113  DSPHDR  MOVE.B  #11,D0              Clear the screen
00001AC6  323C FF00               1114          MOVE.W  #$FF00,D1
00001ACA  4E4F                    1115          TRAP    #15
00001ACC  43F8 13A5               1116          LEA     HEADR,A1            Display header
00001AD0  103C 000E               1117          MOVE.B  #14,D0
00001AD4  4E4F                    1118          TRAP    #15
00001AD6  4238 1014               1119          CLR.B   (IOLC)              Reset line counter
00001ADA  6000 001A               1120          BRA     OP
00001ADE                          1121  
00001ADE  43F8 137C               1122  DONE    LEA     MSSG5,A1            Display end message
00001AE2  103C 000E               1123          MOVE.B  #14,D0
00001AE6  4E4F                    1124          TRAP    #15
00001AE8  103C 0009               1125          MOVE.B  #9,D0
00001AEC  4E4F                    1126          TRAP    #15
00001AEE                          1127  
00001AEE                          1128  *--------------------
00001AEE                          1129  *   OP
00001AEE                          1130  *--------------------
00001AEE                          1131  
00001AEE                          1132  * Swap data registers: Swaps d0 and d1
00001AEE  2F00                    1133  SWAPDR  MOVE.L  D0,-(SP)
00001AF0  2001                    1134          MOVE.L  D1,D0
00001AF2  221F                    1135          MOVE.L  (SP)+,D1
00001AF4  4E75                    1136          RTS
00001AF6                          1137  
00001AF6  2078 1000               1138  OP      MOVE.L  GBUFF,A0        Set A0 to GBUFF location
00001AFA  143C 0000               1139          MOVE.B  #0,D2           Set NULL count to 0
00001AFE  0C90 FFFFFFFF           1140          CMP.L   #$FFFFFFFF,(A0) Check for NULL
00001B04  67D8                    1141          BEQ     DONE            If NULL, branch to DONE
00001B06  3018                    1142          MOVE.W  (A0)+,D0        Transfer word data to D0, post-increment location
00001B08  3218                    1143          MOVE.W  (A0)+,D1        Transfer next word data to D1, post-increment location
00001B0A  21F8 1000 1010          1144          MOVE.L   GBUFF,IOADDR   Set memory location for IO
00001B10                          1145  
00001B10                          1146  
00001B10                          1147          * Mask bits to determine OP-code and branch correspondingly-- high order bits are checked first
00001B10                          1148          
00001B10                          1149          * LSL:    1110001111XXXXXX
00001B10  343C E3C0               1150          MOVE.W  #%1110001111000000,D2
00001B14  363C 1C00               1151          MOVE.W  #%0001110000000000,D3
00001B18  6100 FA48               1152          BSR     CMPMSK
00001B1C  6700 04A8               1153          BEQ     BRLSL
00001B20                          1154  
00001B20                          1155          * LSL:    1110XXX1XXX01XXX
00001B20  343C E108               1156          MOVE.W  #%1110000100001000,D2
00001B24  363C 1010               1157          MOVE.W  #%0001000000010000,D3
00001B28  6100 FA38               1158          BSR     CMPMSK
00001B2C  6700 0498               1159          BEQ     BRLSL
00001B30                          1160  
00001B30                          1161          * LSR:    1110001011XXXXXX
00001B30  343C E2C0               1162          MOVE.W  #%1110001011000000,D2
00001B34  363C 1D00               1163          MOVE.W  #%0001110100000000,D3
00001B38  6100 FA28               1164          BSR     CMPMSK
00001B3C  6700 0492               1165          BEQ     BRLSR
00001B40                          1166  
00001B40                          1167          * LSR:    1110XXX0XXX01XXX
00001B40  343C E008               1168          MOVE.W  #%1110000000001000,D2
00001B44  363C 1110               1169          MOVE.W  #%0001000100010000,D3
00001B48  6100 FA18               1170          BSR     CMPMSK
00001B4C  6700 0482               1171          BEQ     BRLSR
00001B50                          1172  
00001B50                          1173          * ASL:    1110000111XXXXXX
00001B50  343C E1C0               1174          MOVE.W  #%1110000111000000,D2
00001B54  363C 1E00               1175          MOVE.W  #%0001111000000000,D3
00001B58  6100 FA08               1176          BSR     CMPMSK
00001B5C  6700 0454               1177          BEQ     BRASL
00001B60                          1178  
00001B60                          1179          * ASL:    1110XXX1XXX00XXX
00001B60  343C E100               1180          MOVE.W  #%1110000100000000,D2
00001B64  363C 1018               1181          MOVE.W  #%0001000000011000,D3
00001B68  6100 F9F8               1182          BSR     CMPMSK
00001B6C  6700 0444               1183          BEQ     BRASL
00001B70                          1184  
00001B70                          1185          * ASR:    1110000011XXXXXX
00001B70  343C E0C0               1186          MOVE.W  #%1110000011000000,D2
00001B74  363C 1F00               1187          MOVE.W  #%0001111100000000,D3
00001B78  6100 F9E8               1188          BSR     CMPMSK
00001B7C  6700 043E               1189          BEQ     BRASR
00001B80                          1190  
00001B80                          1191          * ASR:    1110XXX0XXX00XXX
00001B80  343C E000               1192          MOVE.W  #%1110000000000000,D2
00001B84  363C 1118               1193          MOVE.W  #%0001000100011000,D3
00001B88  6100 F9D8               1194          BSR     CMPMSK
00001B8C  6700 0424               1195          BEQ     BRASL
00001B90                          1196  
00001B90                          1197          * ADD:    1101XXXXXXXXXXXX
00001B90                          1198          * ADDA
00001B90  343C D000               1199          MOVE.W  #%1101000000000000,D2
00001B94  363C 2000               1200          MOVE.W  #%0010000000000000,D3
00001B98  6100 F9C8               1201          BSR     CMPMSK
00001B9C  6700 02B2               1202          BEQ     BRADD
00001BA0                          1203  
00001BA0                          1204          * ADDI:   00000110XXXXXXXX
00001BA0  343C 0600               1205          MOVE.W  #%0000011000000000,D2
00001BA4  363C F900               1206          MOVE.W  #%1111100100000000,D3
00001BA8  6100 F9B8               1207          BSR     CMPMSK
00001BAC  6700 02D8               1208          BEQ     BRADDI
00001BB0                          1209  
00001BB0                          1210          * AND:    1100XXXXXXXXXXXX
00001BB0  343C C000               1211          MOVE.W  #%1100000000000000,D2
00001BB4  363C 3000               1212          MOVE.W  #%0011000000000000,D3
00001BB8  6100 F9A8               1213          BSR     CMPMSK
00001BBC  6700 02D2               1214          BEQ     BRAND
00001BC0                          1215  
00001BC0                          1216          * MULU:   0100110000XXXXXX
00001BC0  343C 4C00               1217          MOVE.W  #%0100110000000000,D2
00001BC4  363C B3C0               1218          MOVE.W  #%1011001111000000,D3
00001BC8  6100 F998               1219          BSR     CMPMSK
00001BCC  6618                    1220          BNE     *+26
00001BCE  6100 FF1E               1221          BSR     SWAPDR
00001BD2                          1222          * nxt wrd 0XXX0X0000000XXX
00001BD2  343C 0000               1223          MOVE.W  #%0000000000000000,D2
00001BD6  363C 8BF8               1224          MOVE.W  #%1000101111111000,D3
00001BDA  6100 F986               1225          BSR     CMPMSK
00001BDE  6700 03FA               1226          BEQ     BRMULU
00001BE2  6100 FF0A               1227          BSR     SWAPDR
00001BE6                          1228  
00001BE6                          1229          * CMP:    1011XXXXXXXXXXXX
00001BE6                          1230          * CMPA
00001BE6  343C B000               1231          MOVE.W  #%1011000000000000,D2
00001BEA  363C 4000               1232          MOVE.W  #%0100000000000000,D3
00001BEE  6100 F972               1233          BSR     CMPMSK
00001BF2  6700 030C               1234          BEQ     BRCMP
00001BF6                          1235  
00001BF6                          1236          * CMPI:   00001100XXXXXXXX
00001BF6  343C 0C00               1237          MOVE.W  #%0000110000000000,D2
00001BFA  363C F300               1238          MOVE.W  #%1111001100000000,D3
00001BFE  6100 F962               1239          BSR     CMPMSK
00001C02  6700 0310               1240          BEQ     BRCMPI
00001C06                          1241  
00001C06                          1242          * EOR:    1011XXXXXXXXXXXX
00001C06  343C B000               1243          MOVE.W  #%1011000000000000,D2
00001C0A  363C 4000               1244          MOVE.W  #%0100000000000000,D3
00001C0E  6100 F952               1245          BSR     CMPMSK
00001C12  6700 03DA               1246          BEQ     BREOR
00001C16                          1247  
00001C16                          1248          * EORI:   00001010XXXXXXXX
00001C16  343C 0A00               1249          MOVE.W  #%0000101000000000,D2
00001C1A  363C F500               1250          MOVE.W  #%1111010100000000,D3
00001C1E  6100 F942               1251          BSR     CMPMSK
00001C22  6700 03DE               1252          BEQ     BREORI
00001C26                          1253  
00001C26                          1254          * DIVS:   0100110001XXXXXX
00001C26  343C 4C40               1255          MOVE.W  #%0100110001000000,D2
00001C2A  363C B380               1256          MOVE.W  #%1011001110000000,D3
00001C2E  6100 F932               1257          BSR     CMPMSK
00001C32  6618                    1258          BNE     *+26
00001C34  6100 FEB8               1259          BSR     SWAPDR
00001C38                          1260          * nxt wrd 0XXX1X0000000XXX
00001C38  343C 0800               1261          MOVE.W  #%0000100000000000,D2
00001C3C  363C 83F8               1262          MOVE.W  #%1000001111111000,D3
00001C40  6100 F920               1263          BSR     CMPMSK
00001C44  6700 039E               1264          BEQ     BRDIVS
00001C48  6100 FEA4               1265          BSR     SWAPDR
00001C4C                          1266  
00001C4C                          1267          * MOVEQ:  0111XXX0XXXXXXXX
00001C4C  343C 7000               1268          MOVE.W  #%0111000000000000,D2
00001C50  363C 8100               1269          MOVE.W  #%1000000100000000,D3
00001C54  6100 F90C               1270          BSR     CMPMSK
00001C58  6700 034E               1271          BEQ     BRMOVEQ
00001C5C                          1272  
00001C5C                          1273          * BCC:    01100000XXXXXXXX
00001C5C  343C 6000               1274          MOVE.W  #%0110000000000000,D2
00001C60  363C 9F00               1275          MOVE.W  #%1001111100000000,D3
00001C64  6100 F8FC               1276          BSR     CMPMSK
00001C68  6700 024C               1277          BEQ     BRBCC
00001C6C                          1278  
00001C6C                          1279          * ADDQ:   0101XXXXXXXXXXXX
00001C6C  343C 5000               1280          MOVE.W  #%0101000000000000,D2
00001C70  363C A000               1281          MOVE.W  #%1010000000000000,D3
00001C74  6100 F8D8               1282          BSR     TSTMSK
00001C78  6700 0202               1283          BEQ     BRADDQ
00001C7C                          1284  
00001C7C                          1285          * RTS:    0100111001110101
00001C7C  B07C 4E45               1286          CMP.W   #%0100111001000101,D0
00001C80  6700 029C               1287          BEQ     BRRTS
00001C84                          1288  
00001C84                          1289          * JSR:    0100111010XXXXXX
00001C84  343C 4E80               1290          MOVE.W  #%0100111010000000,D2
00001C88  363C B140               1291          MOVE.W  #%1011000101000000,D3
00001C8C  6100 F8D4               1292          BSR     CMPMSK
00001C90  6700 02B4               1293          BEQ     BRJSR
00001C94                          1294  
00001C94                          1295          * NOT:    01000110XXXXXXXX
00001C94  343C 4600               1296          MOVE.W  #%0100011000000000,D2
00001C98  363C B900               1297          MOVE.W  #%1011100100000000,D3
00001C9C  6100 F8C4               1298          BSR     CMPMSK
00001CA0  6700 036A               1299          BEQ     BRNOT
00001CA4                          1300  
00001CA4                          1301  
00001CA4                          1302          * LEA:    0100XXX111XXXXXX
00001CA4  343C 41C0               1303          MOVE.W  #%0100000111000000,D2
00001CA8  363C B000               1304          MOVE.W  #%1011000000000000,D3
00001CAC  6100 F8B4               1305          BSR     CMPMSK
00001CB0  6700 0276               1306          BEQ     BRLEA
00001CB4                          1307  
00001CB4                          1308          * MOVEM:  01001X001XXXXXXX
00001CB4  343C 4880               1309          MOVE.W  #%0100100010000000,D2
00001CB8  363C B300               1310          MOVE.W  #%1011001100000000,D3
00001CBC  6100 F8A4               1311          BSR     CMPMSK
00001CC0  6700 02D8               1312          BEQ     BRMOVEM
00001CC4                          1313  
00001CC4                          1314          * MOVE:   00XXXXXXXXXXXXXX
00001CC4  343C 0000               1315          MOVE.W  #%0000000000000000,D2
00001CC8  363C C000               1316          MOVE.W  #%1100000000000000,D3
00001CCC  6100 F894               1317          BSR     CMPMSK
00001CD0  6700 027E               1318          BEQ     BRMOVE
00001CD4                          1319  
00001CD4                          1320          * CMPI:   00001100XXXXXXXX
00001CD4  343C 0C00               1321          MOVE.W  #%0000110000000000,D2
00001CD8  363C F300               1322          MOVE.W  #%1111001100000000,D3
00001CDC  6100 F884               1323          BSR     CMPMSK
00001CE0  6700 0232               1324          BEQ     BRCMPI
00001CE4                          1325  
00001CE4                          1326          * BTST:   0000100000XXXXXX
00001CE4  343C 0800               1327          MOVE.W  #%0000100000000000,D2
00001CE8  363C F7C0               1328          MOVE.W  #%1111011111000000,D3
00001CEC  6100 F874               1329          BSR     CMPMSK
00001CF0  6618                    1330          BNE     *+26
00001CF2  6100 FDFA               1331          BSR     SWAPDR
00001CF6                          1332          * nxt wrd 00000000XXXXXXXX
00001CF6  343C 0000               1333          MOVE.W  #%0000000000000000,D2
00001CFA  363C FF00               1334          MOVE.W  #%1111111100000000,D3
00001CFE  6100 F862               1335          BSR     CMPMSK
00001D02  6700 01A8               1336          BEQ     BRBTST
00001D06  6100 FDE6               1337          BSR     SWAPDR
00001D0A                          1338  
00001D0A                          1339          * ORI:    00001010XXXXXXXX
00001D0A  343C 0A00               1340          MOVE.W  #%0000101000000000,D2
00001D0E  363C F500               1341          MOVE.W  #%1111010100000000,D3
00001D12  6100 F84E               1342          BSR     CMPMSK
00001D16  6700 02E0               1343          BEQ     BRORI
00001D1A                          1344  
00001D1A                          1345          * SUB:    1001XXXXXXXXXXXX
00001D1A                          1346          * SUBA, SUBI
00001D1A  343C 9000               1347          MOVE.W  #%1001000000000000,D2
00001D1E  363C 6000               1348          MOVE.W  #%0110000000000000,D3
00001D22  6100 F83E               1349          BSR     CMPMSK
00001D26  6700 02EE               1350          BEQ     BRSUB
00001D2A                          1351       
00001D2A  6000 FBF8               1352          BRA     BRBAD           No mask matched, branch to BRBAD
00001D2E                          1353  
00001D2E                          1354  *--------------------------
00001D2E                          1355  *  Instruction Subroutines
00001D2E                          1356  *--------------------------
00001D2E                          1357  *
00001D2E                          1358  * Advance Buffer: Advances A0 based on the REG & MODE (in that order)
00001D2E                          1359  * Input reg & mode in D1.B, output difference to D2
00001D2E                          1360  * Todo? May be better to copy buffer to A1 and advance A1
00001D2E                          1361  *
00001D2E                          1362  
00001D2E  1F01                    1363  ADVBFR  MOVE.B  D1,-(SP)        Push D1 to the stack
00001D30  2438 1000               1364          MOVE.L  (GBUFF),D2      Copy buffer to D2
00001D34  B23C 0007               1365          CMP.B   #$07,D1         Test 000 111 = Address (Word)
00001D38  6604                    1366          BNE.S   *+6             Branch to next test
00001D3A  54B8 1000               1367          ADD.L   #$2,(GBUFF)     Advance buffer by word
00001D3E  B23C 000F               1368          CMP.B   #$0F,D1         Test 001 111 = Address (Long)
00001D42  6604                    1369          BNE.S   *+6             Branch to next test
00001D44  58B8 1000               1370          ADD.L   #$4,(GBUFF)     Advance buffer by long
00001D48  B23C 0027               1371          CMP.B   #$27,D1         Test 100 111 = Immediate (OP code size)
00001D4C  6622                    1372          BNE.S   ADVRET          Branch to return
00001D4E  1238 100E               1373          MOVE.B  (IOSIZE),D1     Else, read size to D1
00001D52  B03C 0001               1374          CMP.B   #$1,D0          Test 0 = Byte
00001D56  6604                    1375          BNE.S   *+6             Branch to next test
00001D58  54B8 1000               1376          ADD.L   #$2,(GBUFF)     Advance buffer by word (00XBBX)
00001D5C  B23C 0001               1377          CMP.B   #$1,D1          Test 1 = Word
00001D60  6604                    1378          BNE.S   *+6             Branch to next test
00001D62  54B8 1000               1379          ADD.L   #$2,(GBUFF)     Advance buffer by word        
00001D66  B23C 0002               1380          CMP.B   #$2,D1          Test 2 = Long
00001D6A  6604                    1381          BNE.S   *+6             Branch to return method
00001D6C  58B8 1000               1382          ADD.L   #$4,(GBUFF)     Advance buffer by long
00001D70  4482                    1383  ADVRET  NEG.L   D2              Negate original buffer
00001D72  D4B8 1000               1384          ADD.L   (GBUFF),D2      Add buffer to get difference
00001D76  121F                    1385          MOVE.B  (SP)+,D1        Restore D1
00001D78  4E75                    1386          RTS                     Return to caller
00001D7A                          1387  
00001D7A                          1388  
00001D7A                          1389  *
00001D7A                          1390  * Standard Size: Test the standard 2 bit size code
00001D7A                          1391  * Inputs size from D0.B, outputs size to IOSIZE (if found)
00001D7A                          1392  * Set Z-flag if size was found, or clear Z-flag if size was not found
00001D7A                          1393  *
00001D7A                          1394  
00001D7A  1F01                    1395  SSIZE   MOVE.B  D1,-(SP)    Push D1 to stack
00001D7C  123C 00FF               1396          MOVE.B  #$FF,D1     Set size to null
00001D80  B03C 0001               1397          CMP.B   #%01,D0     01 = Byte
00001D84  6604                    1398          BNE.S   *+6         Branch to next test
00001D86  123C 0000               1399          MOVE.B  #$0,D1      Set size to byte
00001D8A  B03C 0003               1400          CMP.B   #%11,D0     11 = Word
00001D8E  6604                    1401          BNE.S   *+6         Branch to next test
00001D90  123C 0001               1402          MOVE.B  #$1,D1      Set size to word
00001D94  B03C 0002               1403          CMP.B   #%10,D0     10 = Long
00001D98  6604                    1404          BNE.S   *+6         Branch to next test
00001D9A  123C 0002               1405          MOVE.B  #$2,D1      Set size to long
00001D9E  B23C 00FF               1406          CMP.B   #$FF,D1     Test if size was found
00001DA2  670A                    1407          BEQ     *+12        If it was not found, branch to clear flag      
00001DA4  11C1 100E               1408          MOVE.B  D1,(IOSIZE) If it was found, store size in IOSIZE
00001DA8  121F                    1409          MOVE.B  (SP)+,D1    Restore D1
00001DAA  6000 F674               1410          BRA     FLAGST      Set flag & return to caller
00001DAE  121F                    1411          MOVE.B  (SP)+,D1    Restore D1
00001DB0  6000 F674               1412          BRA     FLAGCL      Clear flag & return to caller
00001DB4                          1413  
00001DB4                          1414  *
00001DB4                          1415  * OP Size: Test the OP size code
00001DB4                          1416  * Inputs size from D0.B, outputs size to IOSIZE (if found), outputs 0 to D1.B for Dn, or 1 to D1.B for <ea> 
00001DB4                          1417  * Set Z-flag if size was found, or clear Z-flag if size was not found
00001DB4                          1418  * OPM (OP-MODE):  Byte | Word | Long | Operation
00001DB4                          1419  *                  000 |  001 |  010 | <ea> + Dn -> Dn
00001DB4                          1420  *                  100 |  101 |  110 | Dn + <ea> -> <ea>
00001DB4                          1421  *
00001DB4                          1422  
00001DB4  1038 10BF               1423  OPSIZE  MOVE.B  (DMD),D0    Get the OP mode from dest mode
00001DB8  123C 0000               1424          MOVE.B  #0,D1       Move 0 to D1 for Dn
00001DBC  B03C 0004               1425          CMP.B   #4,D0       Compare OP mode to 4
00001DC0  6610                    1426          BNE.S   *+18        Branch to next test
00001DC2  5900                    1427          SUB.B   #4,D0       Subtract 4
00001DC4  123C 0001               1428          MOVE.B  #1,D1       Move 1 to D1 for <EA>
00001DC8  123C 00FF               1429          MOVE.B  #$FF,D1     Set size to null
00001DCC  B03C 0000               1430          CMP.B   #%000,D0    000 = Byte
00001DD0  6604                    1431          BNE.S   *+6         Branch to next test
00001DD2  123C 0000               1432          MOVE.B  #$0,D1      Set size to byte
00001DD6  B03C 0001               1433          CMP.B   #%001,D0    001 = Word
00001DDA  6604                    1434          BNE.S   *+6         Branch to next test
00001DDC  123C 0001               1435          MOVE.B  #$1,D1      Set size to word
00001DE0  B03C 0002               1436          CMP.B   #%010,D0    010 = Long
00001DE4  6604                    1437          BNE.S   *+6         Branch to next test
00001DE6  123C 0002               1438          MOVE.B  #$2,D1      Set size to long
00001DEA  B23C 00FF               1439          CMP.B   #$FF,D1     Test if size was found
00001DEE  670C                    1440          BEQ     *+14        If it was not found, branch to clear flag
00001DF0  11C1 100E               1441          MOVE.B  D1,(IOSIZE) If it was found, store size in IOSIZE
00001DF4  6000 F62A               1442          BRA     FLAGST      Set flag & return to caller
00001DF8  6000 F62C               1443          BRA     FLAGCL      Clear the flag & return to caller
00001DFC                          1444  
00001DFC                          1445  *
00001DFC                          1446  * Extract destination: Extracts destination mode to DMD and destination register to DRG from instruction in A0.W
00001DFC                          1447  * Outputs a combination of mode & reg in D1.B
00001DFC                          1448  *
00001DFC                          1449  
00001DFC  48E7 A000               1450  EXDST   MOVEM.L D0/D2,-(SP)     Push D0 and D2 to stack
00001E00  3010                    1451          MOVE.W  (A0),D0         Move instruction word to D0
00001E02  243C 000001C0           1452          MOVE.L  #$1C0,D2        Extract dest mode at 0000000111000000
00001E08  6100 F786               1453          BSR     EXTMSK          Get dest mode to D1
00001E0C  11C1 10BF               1454          MOVE.B  D1,(DMD)        Move dest mode to DMD
00001E10  243C 00000E00           1455          MOVE.L  #$E00,D2        Extract dest reg at 0000111000000000
00001E16  6100 F778               1456          BSR     EXTMSK          Get dest reg to D1
00001E1A  11C1 10C0               1457          MOVE.B  D1,(DRG)        Move dest reg to (DRG)
00001E1E  E709                    1458          LSL.B   #3,D1           Shift the reg 3 bits left
00001E20  8238 10BF               1459          OR.B    (DMD),D1        Add mode after reg
00001E24  4CDF 0005               1460          MOVEM.L (SP)+,D0/D2     Restore D0 and D2
00001E28  4E75                    1461          RTS                     Return to caller
00001E2A                          1462  
00001E2A                          1463  *
00001E2A                          1464  * Extract source: Extracts source mode and register
00001E2A                          1465  * Inputs instruction from A0, outputs mode to SMD and register to SRG
00001E2A                          1466  * Outputs a combination of mode & reg in D1.B
00001E2A                          1467  *
00001E2A                          1468  
00001E2A  48E7 A000               1469  EXSRC   MOVEM.L D0/D2,-(SP)     Push D0 and D2 to stack
00001E2E  3010                    1470          MOVE.W  (A0),D0         Move instruction word to D0
00001E30  7438                    1471          MOVE.L  #$38,D2         Extract src mode at 0000000000111000
00001E32  6100 F75C               1472          BSR     EXTMSK          Get src mode to D1
00001E36  11C1 10C1               1473          MOVE.B  D1,(SMD)        Move src mode to (OMD)
00001E3A  7407                    1474          MOVE.L  #$7,D2          Extract src reg at 0000000000000111
00001E3C  6100 F752               1475          BSR     EXTMSK          Get src reg to D1
00001E40  11C1 10C2               1476          MOVE.B  D1,(SRG)        Move src reg to (ORG)
00001E44  E709                    1477          LSL.B   #3,D1           Shift the reg 3 bits left
00001E46  8238 10C1               1478          OR.B    (SMD),D1        Add mode after reg
00001E4A  4CDF 0005               1479          MOVEM.L (SP)+,D0/D2     Restore D0 and D2
00001E4E  4E75                    1480          RTS                     Return to caller
00001E50                          1481  
00001E50                          1482  *
00001E50                          1483  * ADD: 1101|REG|OPM|EMD|ERG
00001E50                          1484  *
00001E50                          1485  
00001E50  11FC 0011 100C          1486  BRADD   MOVE.B  #$11,(IOOPCD)   Set OP-code name
00001E56                          1487  
00001E56  2078 1000               1488          MOVE.L  GBUFF,A0        Point A0 to GBUFF
00001E5A                          1489  
00001E5A  61CE                    1490          BSR     EXSRC           Extract EA mode & register
00001E5C  619E                    1491          BSR     EXDST           Extract OP mode & register
00001E5E                          1492          
00001E5E  6100 FF54               1493          BSR     OPSIZE          If size was not found, translate OP mode
00001E62  6600 FAC0               1494          BNE     BRBAD           If size was not found, branch to BAD
00001E66                          1495  
00001E66  B23C 0001               1496          CMP.B   #1,D1           Compare destination mode to <EA>
00001E6A  6700 0006               1497          BEQ     BRADDA          If ==, branch to ADDA
00001E6E                          1498  
00001E6E  6000 FADE               1499          BRA     PRINT           Go to next instruction
00001E72                          1500  
00001E72                          1501  *
00001E72                          1502  * ADDA: 1101|REG|OPM|EMD|ERG
00001E72                          1503  *
00001E72                          1504  
00001E72  11FC 0015 100C          1505  BRADDA  MOVE.B  #$15,(IOOPCD)   Set OP-code name
00001E78  6000 FAD4               1506          BRA     PRINT           Go to next instruction
00001E7C                          1507  
00001E7C  11FC 001A 100C          1508  BRADDQ  MOVE.B  #$1A,(IOOPCD)   Set OP-code name
00001E82  6000 FACA               1509          BRA     PRINT           Go to next instruction
00001E86                          1510  
00001E86  11FC 0099 100C          1511  BRADDI  MOVE.B  #$99,(IOOPCD)   Set OP-code name
00001E8C  6000 FA96               1512          BRA     BRBAD           Not supported
00001E90                          1513  
00001E90                          1514  *
00001E90                          1515  * AND: 1100|REG|OPM|EMD|ERG
00001E90                          1516  *
00001E90                          1517  
00001E90  11FC 003B 100C          1518  BRAND   MOVE.B  #$3B,(IOOPCD)   Set OP-code name
00001E96                          1519  
00001E96  2078 1000               1520          MOVE.L  GBUFF,A0        Point A0 to GBUFF
00001E9A                          1521  
00001E9A  618E                    1522          BSR     EXSRC           Extract EA mode & register
00001E9C  6100 FF5E               1523          BSR     EXDST           Extract OP mode & register     
00001EA0                          1524  
00001EA0  6100 FF12               1525          BSR     OPSIZE          If size was not found, translate OP mode
00001EA4  6600 FA7E               1526          BNE     BRBAD           If size was not found, branch to BAD
00001EA8                          1527  
00001EA8                          1528          *CMP.B   #1,D1          Compare destination mode to <EA>
00001EA8                          1529  
00001EA8  6000 FAA4               1530          BRA     PRINT           Go to next instruction
00001EAC                          1531  
00001EAC  11FC 0058 100C          1532  BRBTST  MOVE.B  #$58,(IOOPCD)   Set OP-code name
00001EB2  6000 FA9A               1533          BRA     PRINT           Go to next instruction
00001EB6                          1534  
00001EB6  11FC 006B 100C          1535  BRBCC   MOVE.B  #$6B,(IOOPCD)   Set OP-code name
00001EBC  2078 1000               1536          MOVE.L  GBUFF,A0
00001EC0  3010                    1537          MOVE.W  (A0),D0
00001EC2  243C 000000F0           1538          MOVE.L  #%11110000,D2
00001EC8  6100 F6C6               1539          BSR     EXTMSK
00001ECC  B23C 0006               1540          CMP.B   #%0110,D1
00001ED0  6600 FA52               1541          BNE     BRBAD
00001ED4                          1542         
00001ED4                          1543         * CMP.B   #7,D4
00001ED4                          1544         * BEQ     BRBEQ
00001ED4                          1545         * CMP.B   #13,D4
00001ED4                          1546         * BEQ     BRBLT
00001ED4                          1547         * CMP.B   #6,D4
00001ED4                          1548         * BEQ     BRBNE
00001ED4                          1549         * CMP.B   #2,D4
00001ED4                          1550         * BEQ     BRBHI
00001ED4  6000 FA78               1551          BRA     PRINT
00001ED8                          1552  
00001ED8  11FC 006F 100C          1553  BRBEQ   MOVE.B  #$6F,(IOOPCD)   Set OP-code name
00001EDE  6000 FA6E               1554          BRA     PRINT           Go to next instruction
00001EE2                          1555          
00001EE2  11FC 0073 100C          1556  BRBLT   MOVE.B  #$73,(IOOPCD)   Set OP-code name
00001EE8  6000 FA64               1557          BRA     PRINT           Go to next instruction
00001EEC                          1558  
00001EEC  11FC 0077 100C          1559  BRBNE   MOVE.B  #$77,(IOOPCD)   Set OP-code name
00001EF2  6000 FA5A               1560          BRA     PRINT           Go to next instruction
00001EF6                          1561  
00001EF6  11FC 007B 100C          1562  BRBHI   MOVE.B  #$7B,(IOOPCD)   Set OP-code name
00001EFC  6000 FA50               1563          BRA     PRINT           Go to next instruction
00001F00                          1564  
00001F00  11FC 005D 100C          1565  BRCMP   MOVE.B  #$5D,(IOOPCD)   Set OP-code name
00001F06  6000 FA46               1566          BRA     PRINT           Go to next instruction
00001F0A                          1567  
00001F0A                          1568         
00001F0A  11FC 0061 100C          1569  BRCMPA  MOVE.B  #$61,(IOOPCD)   Set OP-code name
00001F10  6000 FA3C               1570          BRA     PRINT           Go to next instruction
00001F14                          1571  
00001F14  11FC 0066 100C          1572  BRCMPI  MOVE.B  #$66,(IOOPCD)   Set OP-code name
00001F1A  6000 FA32               1573          BRA     PRINT           Go to next instruction
00001F1E                          1574  
00001F1E  11FC 0083 100C          1575  BRRTS   MOVE.B  #$83,(IOOPCD)   Set OP-code name
00001F24  6000 FA28               1576          BRA     PRINT           Go to next instruction
00001F28                          1577  
00001F28  11FC 0037 100C          1578  BRLEA   MOVE.B  #$37,(IOOPCD)   Set OP-code name
00001F2E                          1579  
00001F2E  2078 1000               1580          MOVE.L  GBUFF,A0        Point A0 to GBUFF
00001F32                          1581  
00001F32  6100 FEC8               1582          BSR     EXDST           Extract destination mode & register
00001F36  6100 FDF6               1583          BSR     ADVBFR          Advance the buffer accordingly
00001F3A                          1584  
00001F3A  6100 FEEE               1585          BSR     EXSRC           Extract source mode & register
00001F3E  6100 FDEE               1586          BSR     ADVBFR          Advance the buffer accordingly
00001F42                          1587  
00001F42  6000 FA0A               1588          BRA     PRINT           Go to next instruction
00001F46                          1589  
00001F46                          1590  
00001F46  11FC 007F 100C          1591  BRJSR   MOVE.B  #$7F,(IOOPCD)   Set OP-code name
00001F4C  6000 FA00               1592          BRA     PRINT           Go to next instruction
00001F50                          1593          
00001F50                          1594  *
00001F50                          1595  * Move: 00|SZ|DRG|DMD|SMD|SRG
00001F50                          1596  *
00001F50                          1597  
00001F50  11FC 0000 100C          1598  BRMOVE  MOVE.B  #$00,(IOOPCD)   Set OP-code name
00001F56                          1599  
00001F56  243C 00003000           1600          MOVE.L  #$3000,D2       Extract size at 0011000000000000
00001F5C  6100 F632               1601          BSR     EXTMSK          Get the size to D1
00001F60  1001                    1602          MOVE.B  D1,D0           Move size to D0
00001F62  6100 FE16               1603          BSR     SSIZE           Translate size
00001F66  6600 F9BC               1604          BNE     BRBAD           If size was not found, branch to BAD
00001F6A                          1605  
00001F6A  2078 1000               1606          MOVE.L  GBUFF,A0        Point A0 to GBUFF
00001F6E                          1607  
00001F6E  6100 FE8C               1608          BSR     EXDST           Extract destination mode & register
00001F72  6100 FDBA               1609          BSR     ADVBFR          Advance the buffer accordingly
00001F76                          1610  
00001F76  6100 FEB2               1611          BSR     EXSRC           Extract source mode & register
00001F7A  6100 FDB2               1612          BSR     ADVBFR          Advance the buffer accordingly
00001F7E                          1613  
00001F7E  0C38 0001 10BF          1614          CMP.B   #1,(DMD)        Test if the dest mode == 001
00001F84  6700 0006               1615          BEQ     BRMOVEA         If the dest mode is equal, branch to BRMOVEA
00001F88                          1616  
00001F88  6000 F9C4               1617          BRA     PRINT           Go to next instruction
00001F8C                          1618  
00001F8C  11FC 0005 100C          1619  BRMOVEA MOVE.B  #$05,(IOOPCD)   Set Op-code name
00001F92  54B8 1000               1620          ADD.L   #$2,(GBUFF)     Advance buffer
00001F96  6000 F9B6               1621          BRA     PRINT           Go to next instruction
00001F9A                          1622  
00001F9A  50B8 1000               1623  BRMOVEM ADD.L   #$8,(GBUFF)
00001F9E  11FC 000B 100C          1624          MOVE.B  #$0B,(IOOPCD)   Set OP-code name
00001FA4  6000 F9A8               1625          BRA     PRINT           Go to next instruction
00001FA8                          1626  
00001FA8                          1627  
00001FA8  11FC 008B 100C          1628  BRMOVEQ MOVE.B  #$8B,(IOOPCD)   Set OP-code name
00001FAE  6000 F974               1629          BRA     BRBAD           Not supported
00001FB2                          1630  
00001FB2  11FC 0050 100C          1631  BRASL   MOVE.B  #$50,(IOOPCD)   Set OP-code name
00001FB8  6000 F994               1632          BRA     PRINT           Go to next instruction
00001FBC                          1633  
00001FBC                          1634  
00001FBC  11FC 0095 100C          1635  BRASR   MOVE.B  #$95,(IOOPCD)   Set OP-code name
00001FC2  6000 F960               1636          BRA     BRBAD           Not supported
00001FC6                          1637  
00001FC6  11FC 0091 100C          1638  BRLSL   MOVE.B  #$91,(IOOPCD)   Set OP-code name
00001FCC  6000 F956               1639          BRA     BRBAD           Not supported
00001FD0                          1640  
00001FD0  11FC 0054 100C          1641  BRLSR   MOVE.B  #$54,(IOOPCD)   Set OP-code name
00001FD6  6000 F976               1642          BRA     PRINT           Go to next instruction
00001FDA                          1643  
00001FDA                          1644  
00001FDA  11FC 002D 100C          1645  BRMULU  MOVE.B  #$2D,(IOOPCD)   Set OP-code name
00001FE0  6000 F96C               1646          BRA     PRINT           Go to next instruction
00001FE4                          1647  
00001FE4                          1648  
00001FE4  11FC 0032 100C          1649  BRDIVS  MOVE.B  #$32,(IOOPCD)   Set OP-code name     
00001FEA  6000 F962               1650          BRA     PRINT           Go to next instruction
00001FEE                          1651  
00001FEE                          1652  
00001FEE  11FC 0043 100C          1653  BREOR   MOVE.B  #$43,(IOOPCD)   Set OP-code name
00001FF4  6000 F958               1654          BRA     PRINT           Get next instruction
00001FF8                          1655  
00001FF8  11FC 003F 100C          1656  BRORI   MOVE.B  #$3F,(IOOPCD)   Set OP-code name
00001FFE  6000 F94E               1657          BRA     PRINT           Go to next instruction
00002002                          1658  
00002002                          1659  
00002002  11FC 0047 100C          1660  BREORI  MOVE.B  #$47,(IOOPCD)   Set OP-code name
00002008  6000 F944               1661          BRA     PRINT           Go to next instruction
0000200C                          1662  
0000200C                          1663  
0000200C  11FC 004C 100C          1664  BRNOT   MOVE.B  #$4C,(IOOPCD)   Set OP-code name
00002012  6000 F93A               1665          BRA     PRINT           Go to next instruction
00002016                          1666  
00002016                          1667  
00002016  11FC 001F 100C          1668  BRSUB   MOVE.B  #$1F,(IOOPCD)   Set OP-code name
0000201C                          1669  
0000201C  2078 1000               1670          MOVE.L  GBUFF,A0        Point A0 to GBUFF
00002020                          1671  
00002020  6100 FE08               1672          BSR     EXSRC           Extract EA mode & register
00002024  1401                    1673          MOVE.B  D1,D2           Copy source mode & reg to D2
00002026  6100 FDD4               1674          BSR     EXDST           Extract OP mode & register     
0000202A                          1675  
0000202A  6100 FD88               1676          BSR     OPSIZE          If size was not found, translate OP mode
0000202E  6600 F8F4               1677          BNE     BRBAD           If size was not found, branch to BAD
00002032                          1678  
00002032  B23C 0001               1679          CMP.B   #1,D1           Compare destination mode to <EA>
00002036  6700 0012               1680          BEQ     BRSUBA          If ==, branch to SUBA
0000203A                          1681  
0000203A  B23C 0038               1682          CMP.B   #%111000,D1     Compare source mode to immediate data
0000203E  6700 0014               1683          BEQ     BRSUBI          If ==, branch to SUBI
00002042                          1684  
00002042  6000 F90A               1685          BRA     PRINT           Go to next instruction
00002046                          1686  
00002046                          1687  
00002046  6000 F906               1688          BRA     PRINT           Go to next instruction
0000204A                          1689  
0000204A                          1690  
0000204A  11FC 0023 100C          1691  BRSUBA  MOVE.B  #$23,(IOOPCD)   Set OP-code name   
00002050  6000 F8FC               1692          BRA     PRINT           Go to next instruction
00002054                          1693  
00002054                          1694  
00002054  11FC 0028 100C          1695  BRSUBI  MOVE.B  #$28,(IOOPCD)   Set OP-code name
0000205A  6000 F8F2               1696          BRA     PRINT           Go to next instruction
0000205E                          1697  
0000205E                          1698  
0000205E                          1699          END     START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
A2H                 145E
A2H11               1496
A2H12               149C
A2H13               14A2
A2H14               14A8
A2H15               14AE
A2H16               14B4
A2HADV              148E
ADVBFR              1D2E
ADVRET              1D70
ASCII2HEX           142C
BRADD               1E50
BRADDA              1E72
BRADDI              1E86
BRADDQ              1E7C
BRAND               1E90
BRASL               1FB2
BRASR               1FBC
BRBAD               1924
BRBCC               1EB6
BRBEQ               1ED8
BRBHI               1EF6
BRBLT               1EE2
BRBNE               1EEC
BRBTST              1EAC
BRCMP               1F00
BRCMPA              1F0A
BRCMPI              1F14
BRDIVS              1FE4
BREOR               1FEE
BREORI              2002
BRJSR               1F46
BRLEA               1F28
BRLSL               1FC6
BRLSR               1FD0
BRMOVE              1F50
BRMOVEA             1F8C
BRMOVEM             1F9A
BRMOVEQ             1FA8
BRMULU              1FDA
BRNOT               200C
BRORI               1FF8
BRRTS               1F1E
BRSUB               2016
BRSUBA              204A
BRSUBI              2054
CBITS               0
CMPMSK              1562
CR                  D
DISP0               1788
DISP1               1798
DISP2               17A8
DISP3               17C8
DISP4               17EE
DISP5               1814
DISP6               1830
DISP7               1858
DISP8               1874
DISP9               1890
DISPA               18AC
DISPB               18CE
DISPC               18FC
DISPD               191E
DISPOP              1758
DMD                 10BF
DONE                1ADE
DRG                 10C0
DSPAX               15A8
DSPHADV             1608
DSPHDR              1AC2
DSPHST              15F4
DSPHXA              15B2
DSPHXL              1612
DSPHXLP             15B6
DSPHXN              15D8
DSPHXRT             15D2
DSPHXW              15EC
DSPOFLP             173E
DSPOFRT             1752
DSPOFS              1734
DSPSTLP             1704
DSPSTR              16FA
DSPSTRT             1720
ELOC                1008
ERR0                13C7
ERR1                13EA
EXDST               1DFC
EXSRC               1E2A
EXTADV              15A2
EXTLP               1596
EXTMSK              1590
FLAGCL              1426
FLAGST              1420
GBUFF               1000
H2A                 14EC
H2AA                1524
H2AADV              151C
H2AB                152A
H2AC                1530
H2AD                1536
H2AE                153C
H2AF                1542
HEADR               13A5
HEX2ASCII           14BA
ILL0                161C
ILL1                162A
ILL2                1684
ILL3                1692
IOADDR              1010
IOBDCD              100D
IOLC                1014
IOOPCD              100C
IOOPSZ              10B3
IOSIZE              100E
LF                  A
MASK                1548
MNADDR              7000
MODTBL              1768
MSSG0               10C3
MSSG1               128D
MSSG2               12F6
MSSG4               135B
MSSG5               137C
MXADDR              FFFFFF
NODST               1A3C
NOSRC               1A0A
OP                  1AF6
OPNAME              1015
OPSIZE              1DB4
PAUSE               1A9E
PRINT               194E
PRMPT1              1634
PRMPT2              169C
PRMPTDN             16F0
REGTBL              1860
SLOC                1004
SMD                 10C1
SRG                 10C2
SSIZE               1D7A
START               140C
SWAPDR              1AEE
TB                  9
TSTMSK              154E
VHEX1               FA
VHEX2               DADA
VHEX3               ADADDADA
VHEX4               45
